#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test scancel state and name filters (--state and --name options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test6.8.input
#
source ./globals

set test_id     "6.8"
set exit_code   0
set file_in     "test$test_id.input"
set job_id1     0
set job_id2     0

print_header $test_id

#
# Delete left-over input script files
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"                      >$file_in
exec echo "$srun $bin_sleep $max_job_delay" >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a couple of srun batch jobs
#
spawn $srun --batch --output=/dev/null --error=/dev/null --job-name=job.$test_id --hold -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

spawn $srun --batch --output=/dev/null --error=/dev/null --job-name=job.$test_id -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	cancel_job $job_id1
	exit 1
}
exec $bin_rm -f $file_in

if {[wait_for_job $job_id2 RUNNING] != 0} {
	send_user "\nFAILURE: error waiting for job $job_id2 to run\n"
	cancel_job $job_id1
	exit 1
}

#
# Kill the jobs by state and name
#
set matches  0
spawn $scancel --name=job.$test_id --interactive --state=RUNNING
expect {
	-re "Cancel job_id=$job_id2.*\? " {
		send "y\n"
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel name or state filter failed\n"
	cancel_job $job_id1
	set exit_code 1
}

set matches  0
spawn $scancel --name=job.$test_id --interactive --state=PENDING
expect {
	-re "Cancel job_id=$job_id1.*\? " {
		send "y\n"
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel name or state filter failed\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
