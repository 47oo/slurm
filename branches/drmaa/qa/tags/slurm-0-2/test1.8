#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Confirm that srun stdin, stdout, and stderr options work (--input, 
#          --output, and --error option respectively).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test1.8.input, test1.8.output, and test1.8.error
#
source ./globals

set test_id     "1.8"
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set file_err    "test$test_id.error"

set exit_code            0
set login_grp_info       ""
set job_grp_info         ""
set got_job_grps         0
set got_login_grps       0
set got_sleep_err        0

print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec $bin_rm -f $file_in $file_out $file_err
exec echo "$bin_id"         >$file_in
exec echo "$bin_sleep aaa" >>$file_in
exec echo "exit 0"         >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a shell via srun that uses stdin/out/err and confirm their contents
#
set timeout $max_job_delay
spawn $srun --input=$file_in --output=$file_out --error=$file_err -t1 $bin_bash
expect {
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

#
# Check user id and group id in stdout
#
spawn $bin_id
expect {
	-re "(uid=.*\n)" {
		set login_grp_info $expect_out(1,string)
		set got_login_grps 1
		exp_continue
	}
	eof {
	}
}

if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "(uid=.*\n)" {
			set job_grp_info $expect_out(1,string)
			set got_job_grps 1
			exp_continue
		}
		eof {
		}
	}
}

if {$got_login_grps == 0} {
	send_user "\nFAILURE: Unable to get user and group ID info\n"
	set exit_code 1
}
if {$got_job_grps == 0} {
	send_user "\nFAILURE: User and group ID info missing from stdout\n"
	set exit_code 1
}
if {[string compare $login_grp_info $job_grp_info] != 0} {
	send_user "\nFAILURE: Login and slurm user info mismatch\n"
	set exit_code 1
}

#
# Check for sleep input specification error in stderr
#
if {[wait_for_file $file_err] == 0} {
	spawn $bin_cat $file_err
	expect {
		-re "sleep.*invalid time interval.*\n" {
			set got_sleep_err 1
			exp_continue
		}
		eof {
		}
	}
}
if {$got_sleep_err == 0} {
	send_user "\nFAILURE: Unexpected stderr contents\n"
	set exit_code 1
}

exec $bin_rm -f $file_in $file_out $file_err
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
