#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Confirm that a job executes as the appropriate user and group.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id              "1.1"
set exit_code            0
set login_grp_info       ""
set job_grp_info         ""
set got_job_grps         0
set got_login_grps       0

print_header $test_id

#
# Execute 'id' to determine my user and group ID...
#

spawn $bin_id
expect {
        -re "(uid=.*\n)" {
		set login_grp_info $expect_out(1,string)
		set got_login_grps 1
		exp_continue
	}
	eof {
	}
}

if {$got_login_grps == 0} {
	send_user "\nFAILURE: Unable to get user and group ID info\n"
	exit 1
}

#
# Submit a slurm job that will execute 'id'
#
set timeout $max_job_delay
spawn $srun -N1 -t1 $bin_id  
expect {
	-re "(uid=.*\n)" {
		set job_grp_info $expect_out(1,string)
		set got_job_grps 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

if {$got_job_grps == 0} {
	send_user "\nFAILURE: Did not get user info from slurm job\n"
	exit 1
}
  
#
# Confirm the user id and group id in the slurm job matches that  
# of the local 'id' execution.
#
 
if {[string compare $login_grp_info $job_grp_info] != 0} {
	send_user "\nFAILURE: Login and slurm user info mismatch\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
