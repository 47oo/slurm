#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          sacctmgr show problems
#
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://computing.llnl.gov/linux/slurm/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "21.27"
set test_nu     "test21-11"
set cl1		[format "%s%s" $test_nu "clus1"]
set cl2		[format "%s%s" $test_nu "clus2"]
set ac1		[format "%s%s" $test_nu "acct1"]
set ac2		[format "%s%s" $test_nu "acct2"]
set ac3		[format "%s%s" $test_nu "acct3"]
set us1         [format "%s%s" $test_nu "user1"]
set us2         [format "%s%s" $test_nu "user2"]
set us3		mysql

set access_err  0
set timeout     120

print_header $test_id

#
# Check accounting config and bail if not found.
#
if { [test_account_storage] == 0 } {
	send_user "\nWARNING: This test can't be run without a usable AccountStorageType\n"
	exit 0
}

if { [string compare [check_accounting_admin_level] "Administrator"] } {
	send_user "\nWARNING: This test can't be run without being an Accounting administrator.\nUse sacctmgr mod user \$USER_NAME set admin=admin.\n"
	exit 0
}

#
# Delete
#
spawn $sacctmgr -i delete user $us1,$us2,$us3
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr delete user not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i delete account $ac1,$ac2,$ac3
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr delete account not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i delete cluster $cl1,$cl2
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr delete cluster not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}


#
# Build test associations
#
spawn $sacctmgr -i add cluster $cl1
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add cluster not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i add account $ac1 cluster=$cl1
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add account $ac1 not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i add account $ac2 parent=$ac1 cluster=$cl1
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add account $ac2 not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i add user $us1 account=$ac1 cluster=$cl1
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add user $us1 not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i add user $us2 account=$ac1 cluster=$cl1
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add user $us2 not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i add user $us3 account=$ac2 cluster=$cl1
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add user $us3 not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i delete cluster $cl1
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr delete cluster $cl1  not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i add cluster $cl2
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add cluster $cl2  not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr -i add account $ac3 cluster=$cl2
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr add account $ac3  not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

spawn $sacctmgr show problem
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr show problem  not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}


#
# Test for problems
#
	set exit_code 0
	set matches 0
	set nothing 0

	set my_pid [spawn $sacctmgr -p show problem]
	expect {
		-re "$ac1..Account has no Associations" {
			incr matches
			exp_continue
		}
		-re "$ac2..Account has no Associations" {
			incr matches
			exp_continue
		}
		-re "$cl2.$ac3..Account has no users" {
			incr matches
			exp_continue
		}
		-re "$us3.User has no Associations" {
			incr matches
			exp_continue
		}
		-re "$us1.User does not have a uid" {
			incr matches
			exp_continue
		}
		-re "$us2.User does not have a uid" {
			incr matches
			exp_continue
		}

		timeout {
			send_user "\nFAILURE: sacctmgr show not  responding\n"
			slow_kill $my_pid
			incr exit_code 1
		}
		eof {
			wait
		}
	}

	if {$matches != 6} {
		send_user "\nFAILURE: sacctmgr found $matches of 6 problems\n"
		incr exit_code 1
	}


#
# Delete
#
spawn $sacctmgr -i delete user $us1,$us2,$us3
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr delete users not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
spawn $sacctmgr -i delete account $ac1,$ac2,$ac3
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr delete accounts not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
spawn $sacctmgr -i delete cluster $cl1,$cl2
expect {
	 timeout {
		send_user "\nFAILURE: sacctmgr delete clusters not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
} else {
	send_user "\nFAILURE\n"
}
exit $exit_code
