#!/usr/bin/expect
############################################################################
# Purpose: Test of Moab functionality
#          psub -pool <partition_name>
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id     "40.10"
set exit_code   0
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set job_id      0

print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec rm -f $file_in $file_out
make_bash_script $file_in "
  sleep 50
  exit 0
"

#
# Test of psub to dummy partition name
#
set psub_pid [spawn $psub -x -pool dummy_partition_name -o $file_out -eo -tW 1 $file_in]  
expect {
	-re "($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: psub not responding\n"
		slow_kill $psub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id != 0} {
	send_user "\nFAILURE: psub failed to reject bogus pool value\n"
	exit 1
} else {
	send_user "\nNo worries, above error is expected\n"
}

#
# Test of psub to default partition
#
set job_id      0
set def_part    [default_partition]
exec rm -f $file_out
set psub_pid [spawn $psub -x -pool $def_part -o $file_out -eo -tW 1 $file_in]  
expect {
	-re "($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: psub not responding\n"
		slow_kill $psub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: psub job submit failure\n"
	exit 1
}

#
# Check partition reported by scontrol
#
set matches 0
spawn scontrol show job $job_id
expect {
	-re "Partition=$def_part" {
		set matches 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: pool/partition for job not set properly\n"
	set exit_code 1
}
cancel_job $job_id

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
	exec rm -f $file_in $file_out
}
exit $exit_code
