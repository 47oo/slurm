#!/usr/bin/expect
############################################################################
# Purpose: Test of Moab functionality
#          pstat -u <user_id> -b <bank> (test user and bank filtering)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id     "41.6"
set exit_code   0
set file_in     "test$test_id.input"
set job_id1     0
set job_id2     0


print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec rm -f $file_in
make_bash_script $file_in "
  sleep 40
  exit 0
"

#
# Test of psub bank account
#
set psub_pid [spawn $psub -x -r TEST.$test_id.1 -b dummy_acct1 -o /dev/null -eo -tW 1 $file_in]  
expect {
	-re "($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: psub not responding\n"
		slow_kill $psub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: psub job submit failure\n"
	exit 1
}
set psub_pid [spawn $psub -x -r TEST.$test_id.2 -b dummy_acct2 -o /dev/null -eo -tW 1 $file_in]
expect {
	-re "($number) submitted" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: psub not responding\n"
		slow_kill $psub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: psub job submit failure\n"
	cancel_job $job_id1
	exit 1
}

#
# Get my user name
#
set user_name ""
spawn id -u -n
expect {
	-re "($alpha_numeric_under)" {
		set user_name $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}

#
# Test user name filtering by pstat
#
set name_matches 0
set pstat_pid [spawn $pstat -f -u $user_name]
expect {
	-re "user: *($alpha_numeric_under)" {
		if {[string compare $user_name $expect_out(1,string)] == 0} {
			incr name_matches
		} else {
			send_user "\nFAILURE: pstat user filter failed\n"
			set exit_code 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: pstat not responding\n"
		slow_kill $pstat_pid
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$name_matches != 2} {
	send_user "\nFAILURE: psub job user missing [expr 2 - $name_matches]\n"
	set exit_code 1
} else {
	send_user "\nUser name filtering fine\n"
}

#
# Test user name filtering by pstat
#
set bank_matches 0
set pstat_pid [spawn $pstat -f -b dummy_acct2]
expect {
	-re "bank: *($alpha_numeric_under)" {
		if {[string compare "dummy_acct2" $expect_out(1,string)] == 0} {
			incr bank_matches
		} else {
			send_user "\nFAILURE: pstat bank filter failed\n"
			set exit_code 1
		} 
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: pstat not responding\n"
		slow_kill $pstat_pid
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$bank_matches != 1} {
	send_user "\nFAILURE: psub job bank missing [expr 1 - $bank_matches]\n"
	set exit_code 1
} else {
	send_user "\nBank filtering fine\n"
}

#
# Clean up
#
cancel_job $job_id1
cancel_job $job_id2

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
	exec rm -f $file_in
}
exit $exit_code
