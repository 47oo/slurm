#!/usr/bin/expect
############################################################################
# Purpose: Test of Moab functionality
#          msub -l ppn=# (resource specification)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id          "1.18"
set exit_code        0
set file_in          "test$test_id.input"
set file_out         "test$test_id.output"

print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec rm -f $file_in
make_bash_script $file_in "
  env | grep SLURM
  exit 0
"

#
# Spawn a job to print task count at nodes=1:ppn=1 (Moab nodes = Slurm tasks)
#
exec rm -f $file_out
set job_id 0
set size 1
set msub_pid [spawn $msub -o $file_out -l nodes=1:ppn=$size -j oe $file_in]
expect {
	-re "$alpha_numeric.($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: msub not responding\n"
		slow_kill $msub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: msub job submit failure\n"
	exit 1
}
if {[wait_for_job $job_id DONE] != 0} {
	send_user "\nFAILURE: error on job\n"
	cancel_job $job_id
	exit 1
}

#
# Check for Slurm task count we set
#
set task_cnt 0
if {[wait_for_file $file_out] == 0} {
	spawn sort $file_out
	expect {
		-re  "SLURM_NPROCS=($number)" {
			set task_cnt $expect_out(1,string)
			exp_continue
		}
		eof {
			wait
		}
	}
}
if {$task_cnt != $size} {
	send_user "\nFAILURE: Wrong task count, $task_cnt != $size\n"
	set exit_code 1
} else {
	send_user "\nOK for nodes = $size\n"
}

#
# Spawn a job to print task count at nodes=1:ppn=2 (Moab nodes = Slurm tasks)
#
exec rm -f $file_out
set job_id   0
set size     2
set oversize 0
set msub_pid [spawn $msub -o $file_out -l nodes=1:ppn=$size -j oe $file_in]
expect {
	-re "$alpha_numeric.($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "too many procs per node" {
		set oversize 1
		send_user "\nNo worries, error not unexpected\n"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: msub not responding\n"
		slow_kill $msub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$oversize == 0} {
	if {$job_id == 0} {
		send_user "\nFAILURE: msub job submit failure\n"
		exit 1
	}
	if {[wait_for_job $job_id DONE] != 0} {
		send_user "\nFAILURE: error on job\n"
		cancel_job $job_id
		exit 1
	}
	set node_cnt 0
	set task_cnt 0
	if {[wait_for_file $file_out] == 0} {
		spawn sort $file_out
		expect {
			-re "SLURM_NNODES=($number)" {
				set node_cnt $expect_out(1,string)
				exp_continue
			}
			-re "SLURM_NPROCS=($number)" {
				set task_cnt $expect_out(1,string)
				exp_continue
			}
			eof {
				wait
			}
		}
	}
	if {$node_cnt != 1} {
		send_user "\nFAILURE: Wrong node count, $node_cnt != 1\n"
		set exit_code 1
	}
	if {$task_cnt != $size} {
		send_user "\nFAILURE: Wrong task count, $task_cnt != $size\n"
		set exit_code 1
	}
}

if {$exit_code == 0} {
	exec rm -f $file_in $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code
