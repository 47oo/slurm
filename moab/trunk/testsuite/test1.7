#!/usr/bin/expect
############################################################################
# Purpose: Test of Moab functionality
#          msub --loglevel=#
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id     "1.7"
set exit_code   0
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set job_id      0

print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec rm -f $file_in $file_out
make_bash_script $file_in "
  id
  exit 0
"

#
# Test of msub --loglevel=1
#
set log_info 0
set msub_pid [spawn $msub --loglevel=1 -o $file_out -j oe $file_in]  
expect {
	-re "INFO:" {
		set log_info 1
		exp_continue
	}
	-re "MSURecvData" {
		set log_info -1
		exp_continue
	}
	-re "$alpha_numeric.($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: msub not responding\n"
		slow_kill $msub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: msub job submit failure\n"
	exit 1
}
if {$log_info == 0} {
	send_user "\nFAILURE: msub failed to process --loglevel option\n"
	set exit_code 1
}
if {[wait_for_job $job_id DONE] != 0} {
	send_user "\nFAILURE: error on job\n"
	cancel_job $job_id
	exit 1
}

#
# Test of msub --loglevel=2
#
set job_id   0
set log_info 0
set msub_pid [spawn $msub --loglevel=2 -o $file_out -j oe $file_in]
expect {
	-re "MSURecvData" {
		set log_info 1
		exp_continue
	}
	-re "$alpha_numeric.($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: msub not responding\n"
		slow_kill $msub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: msub job submit failure\n"
	exit 1
}
if {$log_info == 0} {
	send_user "\nFAILURE: msub failed to process --loglevel option\n"
	set exit_code 1
}
if {[wait_for_job $job_id DONE] != 0} {
	send_user "\nFAILURE: error on job\n"
	cancel_job $job_id
	exit 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
	exec rm -f $file_in $file_out
}
exit $exit_code
