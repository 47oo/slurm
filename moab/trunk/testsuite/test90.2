#!/usr/bin/expect
############################################################################
# Purpose: Stress test multiple simultaneous commands via multiple threads
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id      "90.2"
set exit_code    0
set file_in      "test$test_id.input"
set file_script  "./test$test_id.bash"
set interations  5
set sleep_time   1
set task_cnt     10

print_header $test_id

exec rm -f $file_in
make_bash_script $file_in "hosname"

#
# Initiate $task_cnt parallel tasks
#
for {set inx 0} {$inx < $task_cnt} {incr inx} {
	spawn $bin_bash $file_script $mshow $msub $showq $sleep_time $interations
	set task_id($inx) $spawn_id
}

#
# Test output for successful completion messasge
#
set success_cnt 0
set timeout [expr $max_job_delay * $interations * $task_cnt]
for {set inx 0} {$inx < $task_cnt} {incr inx} {
	set spawn_id $task_id($inx)
	expect {
		"########## EXIT_CODE 0 ##########" {
			incr success_cnt
		}
		timeout {
			send_user "\nFAILURE: Timeout on task $inx\n"
		}
		eof {
			wait
			send_user "\nFAILURE: EOF on task $inx\n"
		}
	}
}

if {$success_cnt != $task_cnt} {
	send_user "\nFAILURE: Only $success_cnt of $task_cnt tests passed\n"
	set exit_code 1
}

#
# Check that all jobs have terminated
#
exec sleep 30
set matches [name_job_count "test90.2"]
if {$matches != 0} {
	send_user "\nWARNING: $matches jobs still not done\n"
	exec sleep 60
	set matches [name_job_count "test90.2"]
}
if {$matches != 0} {
	send_user "\nWARNING: $matches jobs still not done\n"
	exec sleep 60
	set matches [name_job_count "test90.2"]
}
if {$matches != 0} {
	send_user "\nFAILURE: $matches jobs still not done\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
