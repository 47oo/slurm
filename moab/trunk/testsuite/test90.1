#!/usr/bin/expect
############################################################################
# Purpose: Submit many simultaneous jobs
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id      "90.1"
set exit_code    0
set file_in      "test$test_id.input"
set job_cnt      20

print_header $test_id

exec rm -f $file_in
make_bash_script $file_in "hosname"

#
# Initiate $task_cnt parallel tasks
#
for {set inx 0} {$inx < $job_cnt} {incr inx} {
	set msub_pid [spawn $msub -o /dev/null -j oe -N test90.1 -l walltime=100 $file_in]
	expect {
		-re "$alpha_numeric.($number)" {
			set task_id($inx) $expect_out(1,string)
			exp_continue
		}
		-re "($number)" {
			set task_id($inx) $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: msub not responding\n"
			slow_kill $msub_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}
}

#
# Check that all jobs have terminated
#
exec sleep 30
set matches [name_job_count "test90.1"]
if {$matches != 0} {
	send_user "\nWARNING: $matches jobs still not done\n"
	send_user "  sleeping 60 seconds more\n"
	exec sleep 60
	set matches [name_job_count "test90.1"]
}
if {$matches != 0} {
	send_user "\nWARNING: $matches jobs still not done\n"
	send_user "  sleeping 60 seconds more\n"
	exec sleep 60
	set matches [name_job_count "test90.1"]
}
if {$matches != 0} {
	send_user "\nFAILURE: $matches jobs still not done\n"
	send_user "  Moab is scheduling very slowly\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec rm -f $file_in
	send_user "\nSUCCESS\n"
} else {
	exec scancel -n test90.1
}
exit $exit_code
