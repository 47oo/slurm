#!/usr/bin/expect
############################################################################
# Purpose: Test of Moab functionality
#          pstat -R -v (running jobs with verbose format)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id     "41.5"
set exit_code   0
set file_in     "test$test_id.input"
set job_id1     0
set job_id2     0


print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec rm -f $file_in
make_bash_script $file_in "
  sleep 40
  exit 0
"

#
# Test of psub bank account, submit two jobs with second one dependent upon first
#
set psub_pid [spawn $psub -x -r TEST.$test_id.1 -b dummy_acct1 -o /dev/null -eo -tW 1 $file_in]  
expect {
	-re "($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: psub not responding\n"
		slow_kill $psub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: psub job submit failure\n"
	exit 1
}
set psub_pid [spawn $psub -x -r TEST.$test_id.2 -b dummy_acct2 -d $job_id1 -o /dev/null -eo -tW 1 $file_in]
expect {
	-re "($number) submitted" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: psub not responding\n"
		slow_kill $psub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: psub job submit failure\n"
	cancel_job $job_id1
	exit 1
}
if {[wait_for_job $job_id2 RUNNING] != 0} {
	send_user "\nFAILURE: error job\n"
	cancel_job $job_id1
	cancel_job $job_id2
	set exit_code 1
}

#
# Test account and job name reported by pstat
#
set job1_matches 0
set job2_matches 0
set pstat_pid [spawn $pstat -R -v]
expect {
	-re "TEST.$test_id.1" {
		set job1_matches 1
		exp_continue
	}
	-re "TEST.$test_id.2" {
		set job2_matches 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: pstat not responding\n"
		slow_kill $pstat_pid
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$job1_matches != 1} {
	send_user "\nFAILURE: Running job not reported\n"
	set exit_code 1
}
if {$job2_matches != 0} {
	send_user "\nFAILURE: Pending job reported\n"
	set exit_code 1
}
cancel_job $job_id1
cancel_job $job_id2

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
	exec rm -f $file_in
}
exit $exit_code
