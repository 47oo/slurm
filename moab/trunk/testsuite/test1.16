#!/usr/bin/expect
############################################################################
# Purpose: Test of Moab functionality
#          msub -V -v <env>  (environment variable propagation)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
############################################################################
source ./globals

set test_id          "1.16"
set test_env_name1   "TEST_ENV1_$test_id"
set test_env_val1    123
set test_env_name2   "TEST_ENV2_$test_id"
set test_env_val2    456
set exit_code        0
set file_in          "test$test_id.input"
set file_out         "test$test_id.output"

global env
set env($test_env_name1) $test_env_val1
set env($test_env_name2) $test_env_val2

print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec rm -f $file_in $file_out
make_bash_script $file_in "
  env
  exit 0
"

#
# Spawn a job to propagate all env vars
#
set msub_pid [spawn $msub -V -o $file_out -j oe -l walltime=100 $file_in]
expect {
	-re "$alpha_numeric.($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: msub not responding\n"
		slow_kill $msub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: msub job submit failure\n"
	exit 1
}
if {[wait_for_job $job_id DONE] != 0} {
	send_user "\nFAILURE: error on job\n"
	cancel_job $job_id
	exit 1
}

#
# Check for env var that we set
#
set matches 0
if {[wait_for_file $file_out] == 0} {
	spawn sort $file_out
	expect {
		-re "$test_env_name1=($number)" {
			if {$expect_out(1,string) == $test_env_val1} {
				incr matches
			}
			exp_continue
		}
		-re "$test_env_name2=($number)" {
			if {$expect_out(1,string) == $test_env_val2} {
				incr matches
			}
		}
		eof {
			wait
		}
	}
}
if {$matches != 2} {
	send_user "\nFAILURE: Environment variables not propagated\n"
	set exit_code 1
} else {
	send_user "\nSo far, so good with all full propagation\n"
}

#
# Spawn a job to propagate selectd env vars
#
exec rm -f $file_out
set job_id 0
set msub_pid [spawn $msub -v PATH,$test_env_name1 -o $file_out -j oe -l walltime=100 $file_in]
expect {
	-re "$alpha_numeric.($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: msub not responding\n"
		slow_kill $msub_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: msub job submit failure\n"
	exit 1
}
if {[wait_for_job $job_id DONE] != 0} {
	send_user "\nFAILURE: error on job\n"
	cancel_job $job_id
	exit 1
}

#
# Check for env var that we set
#
set matches 0
if {[wait_for_file $file_out] == 0} {
	spawn sort $file_out
	expect {
		-re "$test_env_name1=($number)" {
			if {$expect_out(1,string) == $test_env_val1} {
				incr matches
			}
			exp_continue
		}
		-re "$test_env_name2=($number)" {
			set matches -100
		}
		eof {
			wait
		}
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: Wrong environment variables not propagated\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec rm -f $file_in $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code
