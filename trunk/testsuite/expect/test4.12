#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of sinfo cpu total and allocated
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2009 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
# 
# This file is part of SLURM, a resource management program.
# For details, see <https://computing.llnl.gov/linux/slurm/>.
# Please also read the included file: DISCLAIMER.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "4.12"
set file_in     "test$test_id.in"
set exit_code   0
set pnumsc      0
set pnumsi      0
set aprocsc     0
set aprocsi     0
set tcpuc       0
set tacpuc      0
print_header $test_id

#
# Create a script
#
make_bash_script $file_in "
srun -N1 hostname
  sleep 20
 "

#
# Submit a job
# Issue scontrol to find total and allocated processor counts
#
set timeout $max_job_delay
spawn $sbatch  $file_in

spawn $scontrol show node
expect {
	-re " Procs=($number)" {
		set pnumsc $expect_out(1,string) 
		send_user "\nscontrol reports $pnumsc procs\n"
		set tcpuc [expr $tcpuc + $pnumsc]
		send_user "\nTotal CPU count is now $tcpuc procs\n"
		exp_continue
	}
	-re " AllocProcs=($number)" {
		set pnumsi $expect_out(1,string) 
		send_user "\nscontrol reports $pnumsi procs\n"
		set tacpuc [expr $tacpuc + $pnumsi]
		send_user "\nAllocated CPU count is now $tacpuc procs\n"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

set simatches 0
spawn $sinfo -o %C
expect {
	-re "($number).$number.$number.($number)" {
		set aprocsi $expect_out(1,string) 
		set pnumsi $expect_out(2,string) 
		send_user "\nsinfo reports $aprocsi allocated procs\n"
		send_user "\nsinfo reports $pnumsi procs\n"
		incr simatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$simatches != 1} {
	send_user "\nFAILURE: Unexpected output $simatches\n"
	set exit_code 1
}

if {$tcpuc == $pnumsi} {
	send_user "\nGOOD: Total procs are a match at $tcpuc\n"
	} else {
	send_user "\nFAILURE: Total procs NOT the same\n"
	set exit_code 1
	}

if {$tacpuc == $aprocsi} {
	send_user "\nGOOD: Allocated Procs are a match at $tacpuc\n"
	} else {
	send_user "\nFAILURE: Allocated Procs NOT the same\n"
	set exit_code 1
	}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
