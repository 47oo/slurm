/*****************************************************************************\
 *  bit_array.h - Functions to manupulate arrays of bitstrings
 *****************************************************************************
 *  Copyright (C) 2010 Lawrence Livermore National Security.
 *  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
 *  Written by Morris Jette <jette1@llnl.gov>
 *  CODE-OCEC-09-009. All rights reserved.
 *
 *  This file is part of SLURM, a resource management program.
 *  For details, see <https://computing.llnl.gov/linux/slurm/>.
 *  Please also read the included file: DISCLAIMER.
 *
 *  SLURM is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *
 *  In addition, as a special exception, the copyright holders give permission
 *  to link the code of portions of this program with the OpenSSL library under
 *  certain conditions as described in each individual source file, and
 *  distribute linked combinations including the two. You must obey the GNU
 *  General Public License in all respects for all of the code used other than
 *  OpenSSL. If you modify file(s) with this exception, you may extend this
 *  exception to your version of the file(s), but you are not obligated to do
 *  so. If you do not wish to do so, delete this exception statement from your
 *  version.  If you delete this exception statement from all source files in
 *  the program, then also delete it here.
 *
 *  SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
 *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 *  details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with SLURM; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
\*****************************************************************************/

#ifndef _BIT_ARRAY_H
#define _BIT_ARRAY_H

#include "src/common/bitstring.h"
#include "src/common/pack.h"

typedef struct bit_array_struct {
	bitstr_t *bitstr;	/* single bitstring			*/
	uint32_t *rec_size;	/* size of each original bitstring	*/
	uint32_t *rec_reps;	/* repitition count of rec_size		*/
	uint32_t rec_cnt;	/* length of rec_size and rec_reps	*/
} bit_array_struct_t;

/*
 * Convert an array of bitstrings into a simple structure containing one
 *	bitstring. Use 
 * IN strings - a NULL termininated array of pointers to bitstrings to be
 *		converted
 * OUT bitstruct - a struct containing all of the information from all
 *		bitstrings in a single bitstring
 * RET: SLURM_SUCCESS or error code
 *
 * NOTE: User is responsible to free bitstruct using bitstruct_free()
 * NOTE: Use bitstruct2strings() to recreate original bitstrings
 */
int bitstrings2struct(bitstr_t **strings, bit_array_struct_t **bitstruct);

/* Log the contents of a bitstruct */
void bitstruct_log(bit_array_struct_t *bitstruct);

/*
 * Convert a simple structure containing one bitstring into an array of
 *	bitstrings
 * IN bitstruct - a struct containing all of the information from all bitstrings
 *	in a single bitstrings
 * OUT strings - a NULL termininated array of pointers to bitstrings originally   *	passed as input to bitstrings2struct()
 * RET: SLURM_SUCCESS or error code
 *
 * NOTE: User is responsible to free strings
 */
int bitstruct2strings(bit_array_struct_t *bitstruct, bitstr_t ***strings);

/*
 * free bitstruct generated by bitstrings2struct()
 */
void bitstruct_free(bit_array_struct_t *bitstruct);

/*
 * pack bitstruct generated by bitstrings2struct() into a buffer
 */
void bitstruct_pack(bit_array_struct_t *bitstruct, Buf buffer,
		    uint16_t protocol_version);

/*
 * unpack bitstruct from a buffer as packed by pack_bitstruct()
 * RET: SLURM_SUCCESS or error code
 *
 * NOTE: User is responsible to free bitstruct using bitstruct_free()
 */
int bitstruct_unpack(bit_array_struct_t **bitstruct, Buf buffer,
		     uint16_t protocol_version);

#define safe_bitstruct_unpack(valp,buf,ver) do {	\
        assert(valp != NULL);				\
        assert(buf->magic == BUF_MAGIC);		\
        if (bitstruct_unpack(valp,buf,ver))		\
                goto unpack_error;			\
} while (0)

#endif /* !_BIT_ARRAY_H */
