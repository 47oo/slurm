/*****************************************************************************\
 *  Copyright (C) 2002 The Regents of the University of California.
 *  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
 *  Written by moe jette <jette1@llnl.gov>.
 *  UCRL-CODE-2002-040.
 *  
 *  This file is part of SLURM, a resource management program.
 *  For details, see <http://www.llnl.gov/linux/slurm/>.
 *  
 *  SLURM is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *  
 *  SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
 *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 *  details.
 *  
 *  You should have received a copy of the GNU General Public License along
 *  with SLURM; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
 *****************************************************************************
 *  Without this change, TotalView will not operate properly with 
 *  SLURM launched jobs on some versions of Linux. We want the tasks 
 *  to be in a STOPPED state and detached from the slurmd daemon. 
 *  The default code leaves an extra SIGSTOP pending. Any time the 
 *  task is allowed to process pending signals, it will be stopped 
 *  again and confuse TotalView.
\*****************************************************************************/
--- ptrace.c    18 Sep 2003 23:50:00 -0000      1.3.2.1.4.1
+++ ptrace.c    22 Mar 2004 19:58:29 -0000
@@ -113,7 +113,10 @@ int ptrace_attach(struct task_struct *ta
        __ptrace_link(task, current);
        write_unlock_irq(&tasklist_lock);

-       force_sig_specific(SIGSTOP, task);
+       if (task->state != TASK_STOPPED)
+               force_sig_specific(SIGSTOP, task);
+       else
+               task->exit_code = SIGSTOP;
        return 0;

 bad:
/********************************** END **************************************/
