.TH "Slurm API" "3" "October 2002" "Morris Jette" "Slurm job information reporting functions"
.SH "NAME"
slurm_free_job_info, slurm_load_jobs, 
slurm_print_job_info, slurm_print_job_info_msg
\- Slurm job information reporting functions
.SH "SYNTAX"
.LP 
#include <stdio.h>
.br
#include <slurm.h>
.LP
void \fBslurm_free_job_info\fR (
.br 
	job_info_msg_t *\fIjob_info_msg_ptr\fP
.br 
);
.LP 
int \fBslurm_load_jobs\fR (
.br 
	time_t \fIupdate_time\fP,
.br 
	job_info_msg_t **\fIjob_info_msg_pptr\fP
.br 
);
.LP 
void \fBslurm_print_job_info\fR (
.br
	FILE *\fIout_file\fp,
.br
	job_info_t *\fIjob_ptr\fP
.br 
);
.LP 
void \fBslurm_print_job_info_msg\fR (
.br
	FILE *\fIout_file\fp,
.br
	job_info_msg_t *\fIjob_info_msg_ptr\fP
.br 
);
.SH "ARGUMENTS"
.LP 
.TP 
\fIjob_info_msg_pptr\fP
Specifies the double pointer to the structure to be created and filled with the 
time of the last job update, a record count, and detailed information about each 
job. Detailed job information is written to fixed sized records and includes: 
ID number, name, user ID, state, assigned or requested node names, indexes into 
the node table, etc. In the case of indexes into the node table, this is an array 
of integers with pairs of start and end index number into the node information 
records and the data is terminated with a value of -1. See slurm.h for full details 
on the data structure's contents. 
.TP 
\fIjob_info_msg_ptr\fP
Specifies the pointer to the structure created by \fBslurm_load_jobs\fR. 
.TP
\fIjob_ptr\fP
Specifies a pointer to a single job records from the \fIjob_info_msg_ptr\fP data 
structure.
.TP 
\fIout_file\
Specifies the file to print data to.
.TP 
\fIupdate_time\fP
For all of the following informational calls, if update_time is equal to or greater than the last time changes where made to that information, new information is not returned.  Otherwise all the configuration. job, node, or partition records are returned.
.SH "DESCRIPTION"
.LP 
\fBslurm_free_job_info\fR Release the storage generated by the \fBslurm_load_jobs\fR 
function.
.LP 
\fBslurm_load_jobs\fR Returns a job_info_msg_t that contains an update time, record count, and array of job_table records for all jobs.
.LP 
\fBslurm_print_job_info\fR Prints the contents of the data structure describing a 
single job records from the data loaded by the \fBslurm_load_node\fR function.
.LP 
\fBslurm_print_job_info_msg\fR Prints the contents of the data structure describing 
all job records loaded by the \fBslurm_load_node\fR function.
.SH "RETURN VALUE"
.LP
On success, zero is returned. On error, -1 is returned, and Slurm error code is set appropriately.
.SH "ERRORS"
.LP
\fBSLURM_NO_CHANGE_IN_DATA\fR Data has not changed since \fBupdate_time\fR.
.LP
\fBSLURM_PROTOCOL_VERSION_ERROR\fR Protocol version has changed, re-link your code.
.SH "EXAMPLE"
.eo
.LP 
#include <stdio.h>
.br
#include <slurm.h>
.LP 
int main (int argc, char *argv[])
.br 
{
.br 
	int i;
.br
	job_info_msg_t	* job_info_msg = NULL;
.br
	job_info_t * job_ptr;
.LP
	/* get and dump some job information */
.br
	if ( slurm_load_jobs ((time_t) NULL, 
.br
	                      &job_buffer_ptr) ) {
.br
		slurm_perror ("slurm_load_jobs error");
.br
		exit (1);
.br
	}
.LP
	/* The easy way to print... */
.br
	slurm_print_job_info_msg (stdout, job_buffer_ptr);
.LP
	/* A harder way.. */
.br
	for (i = 0; i < job_buffer_ptr->record_count; i++) {
.br
		job_ptr = &job_buffer_ptr->job_array[i];
.br
		slurm_print_job_info(stdout, job_ptr);
.br
	}
.LP
	/* The hardest way. */
.br
	printf ("Jobs updated at %lx, record count %d\n",
.br
	        job_buffer_ptr->last_update, 
.br
	        job_buffer_ptr->record_count);
.br
	for (i = 0; i < job_buffer_ptr->record_count; i++) {
.br
		printf ("JobId=%u UserId=%u\n", 
.br
			job_buffer_ptr->job_array[i].job_id, 
.br
			job_buffer_ptr->job_array[i].user_id);
.br
	}			
.LP
	slurm_free_job_info (job_buffer_ptr);
.br
	exit (0);
.br 
}
.ec
.SH "COPYING"
Copyright (C) 2002 The Regents of the University of California.
Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
UCRL-CODE-2002-040.
.LP
This file is part of SLURM, a resource management program.
For details, see <http://www.llnl.gov/linux/slurm/>.
.LP
SLURM is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.LP
SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.
.SH "SEE ALSO"
.LP 
\fBscontrol\fR(1), \fBsqueue\fR(1), \fBslurm_confirm_allocation\fR(3), 
\fBslurm_get_errno\fR(3), \fBslurm_perror\fR(3), \fBslurm_strerror\fR(3)

