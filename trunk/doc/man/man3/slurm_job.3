.TH "Slurm API" "3" "Release 0.0.0" "Morris Jette" "Slurm job management calls"
.SH "NAME"
.LP 
\fBslurm_job\fR \- Slurm job management calls
.SH "SYNTAX"
.LP 
#include <slurm.h>
.LP 
int \fBslurm_allocate_resources\fR (
.br 
	job_desc_msg_t *\fIjob_desc_msg_ptr\fP,
.br 
	resource_allocation_response_msg_t **\fIslurm_alloc_msg_pptr\fP, 
.br
	int \fIimmediate\fP
.br 
);
.LP
void \fBslurm_cancel_job\fR (
.br 
	uint32_t \fIjob_id\fP
.br 
);
.LP
void \fBslurm_free_resource_allocation_response_msg\fR ( 
.br 
	resource_allocation_response_msg_t *\fIslurm_alloc_msg_ptr\fP 
.br 
);
.LP
void \fBslurm_free_submit_response_response_msg\fR ( 
.br 
	submit_response_msg_t *\fIslurm_submit_msg_ptr\fP 
.br 
);
.LP
void \fBslurm_init_job_desc_msg\fR (
.br 
	job_desc_msg_t *\fIjob_desc_msg_ptr\fP
.br 
);
.LP
int \fBslurm_job_will_run\fR (
.br 
	job_desc_msg_t *\fIjob_desc_msg_ptr\fP,
.br 
	resource_allocation_response_msg_t **\fIslurm_alloc_msg_pptr\fP 
.br 
);
.LP
int \fBslurm_submit_batch_job\fR (
.br 
	job_desc_msg_t *\fIjob_desc_msg_ptr\fP,
.br 
	submit_response_msg_t **\fIslurm_submit_msg_pptr\fP 
.br 
);
.LP
int \fBslurm_update_job\fR (
.br 
	job_desc_msg_t *\fIjob_desc_msg_ptr\fP
.br 
);
.SH "ARGUMENTS"
.LP 
.TP 
\fIimmediate\fP
If set do not queue the job; return the an error code or the results of a successful allocation immediately; do not queue the request.
.TP 
\fIjob_desc_msg_ptr\fP
Specifies the pointer to a job request specification. See slurm.h for full details on the data structure's contents. 
.TP 
\fIjob_id\fP
Slurm job id number.
.TP 
\fIslurm_alloc_msg_pptr\fP
Specifies the double pointer to the structure to be created and filled with a description of the created resource allocation (job): job ID, list of allocated nodes, processor count per allocated node, etc. See slurm.h for full details on the data structure's contents. 
.TP 
\fIslurm_alloc_msg_ptr\fP
Specifies the pointer to the structure to be created and filled in by the function \fIslurm_allocate_resources\fP or \fIslurm_job_will_run\fP.
.TP 
\fIslurm_submit_msg_pptr\fP
Specifies the double pointer to the structure to be created and filled with a description of the created job: job ID, etc. See slurm.h for full details on the data structure's contents. 
.TP 
\fIslurm_submit_msg_ptr\fP
Specifies the pointer to the structure to be created and filled in by the function \fIslurm_submit_batch_job\fP.
.SH "DESCRIPTION"
.LP 
\fBslurm_allocate_resources\fR Request a resource allocation for a job. If successful, a job entry is created. Always release the response message when no longer required using the function \fBslurm_free_resource_allocation_response_msg\fR.
.LP 
\fBslurm_cancel_job\fR Request the cancellation of a running or pending job. This function may only be successfully executed by the job's owner or user root.
.LP 
\fBslurm_free_resource_allocation_response_msg\fR Release the storage generated in response to a call of the function \fBslurm_allocate_resources\fR or \fBslurm_job_will_run\fR.
.LP 
\fBslurm_free_submit_response_msg\fR Release the storage generated in response to a call of the function \fBslurm_submit_batch_job\fR.
.LP 
\fBslurm_init_job_desc_msg\fR Initialize the contents of a job descriptor with default values. Execute this function before issuing a request to submit or modify a job.
.LP 
\fBslurm_job_will_run\fR Determine if the supplied job description could be executed immediately. If successful, a list of the available nodes and their configurations will be returned. Always release the response message when no longer required using the function \fBslurm_free_resource_allocation_response_msg\fR.
.LP 
\fBslurm_submit_batch_job\fR Submit a job for later execution. The job will be queued and executed when resources are available.  Always release the response message when no longer required using the function \fBslurm_free_submit_response_msg\fR.
.LP 
\fBslurm_update_job\fR Update the characteristics of an existing job. Not all job characteristics may be changed (e.g. the time limit of a job may be changed, but the nodes allocated to a running job may not be changed). This function may only be successfully executed by user root.
.SH "RETURN VALUE"
.LP
On success, zero is returned. On error, -1 is returned, and errno is set appropriately.
.SH "ERRORS"
.LP
\fBSLURM_PROTOCOL_VERSION_ERROR\fR Protocol version has changed, re-link your code.
.LP
\fBESLURM_INVALID_PARTITION_SPECIFIED\fR the partition name specified does not exist.
.LP
\fBESLURM_DEFAULT_PARTITION_NOT_SET\fR the system lacks a valid default partition.
.LP
\fBESLURM_JOB_MISSING_PARTITION_KEY\fR use of this partition is restricted through a credential provided only to user root. This job lacks such a valid credential.
.LP
\fBESLURM_JOB_MISSING_REQUIRED_PARTITION_GROUP\fR use of this partition is restricted to certain groups. This user is not a member of an authorized group.
.LP
\fBESLURM_REQUESTED_NODES_NOT_IN_PARTITION\fR the job requested use of specific nodes which are not in the requested (or default) partition.
.LP
\fBESLURM_TOO_MANY_REQUESTED_CPUS\fR the job requested use of more processors than can be made available to in the requested (or default) partition.
.LP
\fBESLURM_TOO_MANY_REQUESTED_NODES\fR the job requested use of more nodes than can be made available to in the requested (or default) partition.
.LP
\fBESLURM_ERROR_ON_DESC_TO_RECORD_COPY\fR unable to create the job due to internal resources being exhausted. Try again later. 
.LP
\fBESLURM_JOB_MISSING_SIZE_SPECIFICATION\fR the job failed to specify some size specification. At least one of the following must be supplied: required processor count, required node count, or required node list. 
.LP
\fBESLURM_JOB_SCRIPT_MISSING\fR failed to identify executable program to be queued. 
.LP
\fBESLURM_USER_ID_MISSING\fR identification of the job's owner was not provided. 
.LP
\fBESLURM_JOB_NAME_TOO_LONG\fR the name to be associated with the job was too long. 
.LP
\fBESLURM_DUPLICATE_JOB_ID\fR the requested job id is already in use. 
.LP
\fBESLURM_NOT_TOP_PRIORITY\fR job can not be started immediately because higher priority jobs are waiting to use this partition. 
.LP
\fBESLURM_REQUESTED_NODE_CONFIG_UNAVAILABLE\fR the requested node configuration is not available (at least not in sufficient quantity) to satisfy the request. 
.LP
\fBESLURM_NODES_BUSY\fR the requested nodes are already in use. 
.LP
\fBESLURM_INVALID_JOB_ID\fR the requested job id does not exist. 
.LP
\fBESLURM_INVALID_NODE_NAMES\fR the requested node name(s) is/are not valid. 
.LP
\fBESLURM_INVALID_PARTITION_NAME\fR the requested partition name is not valid. 
.LP
\fBESLURM_TRANSITION_STATE_NO_UPDATE\fR the requested job configuration change can not take place at this time. Try again later. 
.LP
\fBESLURM_ALREADY_DONE\fR the specified job has already completed and can not be modified. 
.SH "EXAMPLE"
.eo
.LP 
#include <stdio.h>
.br
#include <slurm.h>
.LP 
int main (int argc, char *argv[])
.br 
{
.br 
	job_desc_msg_t job_desc_msg;
.br 
	resource_allocation_response_msg_t* slurm_alloc_msg_ptr ;
.LP 
	slurm_init_job_desc_msg( &job_mesg );
.br 
	job_mesg. name = ("job01\0");
.br 
	job_mesg. min_memory = 1024;
.br 
	job_mesg. time_limit = 200;
.br 
	job_mesg. num_nodes = 400;
.br 
	if (slurm_allocate_resources(&job_desc_msg,&slurm_alloc_msg_ptr,true)) {
.br
		printf ("allocate errno %d\n", errno);
.br 
		exit (1);
	}
.br 
	printf ("Allocated nodes %s to job_id %u\n", 
.br 
		slurm_alloc_msg_ptr->node_list, slurm_alloc_msg_ptr->job_id );
.br 
	if ( slurm_job_cancel ( slurm_alloc_msg_ptr->job_id ) ) {
.br 
		printf ("cancel errno %d\n", errno);
.br 
		exit (1);
.br 
	}
.br
	printf ("canceled job_id %u\n", slurm_alloc_msg_ptr->job_id );
.br 
	slurm_free_resource_allocation_response_msg ( slurm_alloc_msg_ptr );
.br 
	exit (0);
.br 
}
.ec
.SH "SEE ALSO"
.LP 
\fBslurm_load_jobs\fR(3), \fBslurm_free_job_info\fR(3), \fBslurm_strerror\fR(3), \fBslurm_perror\fR(3)
