.TH "Slurm API" "3" "July 2004" "Morris Jette" "Slurm checkpoin functions"

.SH "NAME"
slurm_spawn \- Slurm checkpoint functions

.SH "SYNTAX"
.LP 
#include <slurm/slurm.h>
.LP 
.LP
slurm_step_ctx \fBslurm_checkpoint\fR (
.br
	enum check_opts \fIop\fP,
.br
	uint32_t \fIjob_id\fP,
.br
	uint32_t \fIstep_id\fP
.br
);
.LP
slurm_step_ctx \fBslurm_checkpoint_error\fR (

.br
	uint32_t \fIjob_id\fP,
.br
	uint32_t \fIstep_id\fP,
.br
	uint32_t *\fIckpt_errno\fP,
.br
	char ** \fIckpt_strerror\fP
.br
);

.SH "ARGUMENTS"
.LP 
.TP
\fIop\fP
Specifies operation to perform.
See the \fBCHECKPOINT OPERATIONS\fR section for details.
.TP
\fIjob_id\fP
SLURM job ID to perform the operation upon.
.TP
\fIstep_id\fP
SLURM job step ID to perform the operation upon. 
May be NO_VAL if the operation is to be performed on all steps of the specified job
(only for the \fBslurm_checkpoint\fR function).
.TP
\fIckpt_errno\fP
Set to the last checkpoint error number associated with this slurm job step.
.TP
\fIckpt_strerror\fP
Set to a string descriptive of the last checkpoint error associated with this slurm job step. 
This storage must be freed by the caller.

.SH "DESCRIPTION"
.LP
\fBslurm_checkpoint\fR Perform some checkpoint operation upon a job step. 
See the \fBCHECKPOINT OPERATIONS\fR section for details.
.SH "CHECKPOINT OPERATIONS"
.TP
\fBCHECK_DISABLE\fR
Make the identified job step non-checkpointable. 
This can be issued as needed to prevent checkpointing while 
a job step is in a critical section or for other reasons.
.TP
\fBCHECK_ENABLE\fR
Make the indentified job step checkpointable.
.TP
\fBCHECK_CREATE\fR
Request a checkpoint for the identified job step. 
Continue its execution upon completion of the checkpoint.
.TP
\fBCHECK_VACATE\fR
Request a checkpoint for the identified job step.
Terminate its execution upon completion of the checkpoint.
.TP
\fBCHECK_RESUME\fR
Request that a previously checkpointed job resume execution.
It may continue execution on differrent nodes than were 
originally used.
Execution may be delayed if resources are not immediately 
available.
.TP
\fBCHECK_COMPLETE\fR
Note that a requested checkpoint has been completed.
.TP
\fBCHECK_FAILED\fR
Note that a requested checkpoint has been failed.
.SH "RETURN VALUE"
.LP
Zero is returned upon success. 
On error, -1 is returned, and the Slurm error code is set appropriately.
.SH "ERRORS"
.LP
\fBESLURM_INVALID_JOB_ID\fR the requested job or job step id does not exist. 
.LP
\fBESLURM_ACCESS_DENIED\fR the requesting user lacks authorization for the requested 
action (e.g. trying to delete or modify another user's job). 
.LP
\fBESLURM_DISABLED\fR the requested operation has been disabled for this job step.
This will occur when a request for checkpoint is issued when they have been disabled.
.LP
\fBESLURM_NOT_SUPPORTED\fR the requested operation is not supported on this system.

.SH "EXAMPLE"
.LP 
#include <stdio.h>
.br
#include <stdlib.h>
.br
#include <slurm/slurm.h>
.br
#include <slurm/slurm_errno.h>
.LP 
int main (int argc, char *argv[])
.br 
{
.br 
	uint32_t job_id, step_id, ckpt_errno;
.br
	char *ckpt_strerror;
.LP
	if (argc < 3) {
.br
		printf("Usage: %s job_id step_id\\n");
.br
		exit(1);
.br
	}
.LP
	job_id = atoi(argv[1]);
.br
	step_id = atoi(argv[2]);
.br
	if (slurm_checkpoint_error(job_id, step_id, 
.br
			&ckpt_errno, &ckpt_strerror)) {
.br
		slurm_perror ("slurm_checkpoint_error:");
.br 
		exit (1);
.br
	}
.LP
	printf ("step:%u.%u ckpt_errno=%u ckpt_strerror:%s\\n", 
.br 
	        job_id, step_id, ckpt_errno, ckpt_strerror); 
.br 
	free(ckpt_strerror);
.br 
	exit (0);
.br 
}

.SH "COPYING"
Copyright (C) 2004 The Regents of the University of California.
Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
UCRL-CODE-2002-040.
.LP
This file is part of SLURM, a resource management program.
For details, see <http://www.llnl.gov/linux/slurm/>.
.LP
SLURM is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.LP
SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.

.SH "SEE ALSO"
.LP 
\fBsrun\fR(1), \fBsqueue\fR(1), \fBfree\fR(3) 
