#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Confirm that a job executes with various launch thread fanouts
#          (--pmi-threads option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "18.13"
set exit_code   0

print_header $test_id

#
# Submit a job with one thread fanout
#
set host_0      ""
set timeout $max_job_delay
if { [test_bluegene] } {
	set node_cnt 32-32k
} else {
	if { [test_xcpu] } {
		set node_cnt 1-1
	} else {
		set node_cnt 1-64
	}
}

set job_id 0
spawn $salloc -t1 -N$node_cnt $slaunch -l --pmi-threads=1 $bin_hostname  
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "0: ($alpha_numeric)" {
		set host_0 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id == 0} {
			kill_salloc
		} else {
			cancel_job $job_id
		}
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

#
# Verify node registration
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}

#
# Submit a job with 32 thread fanout
#
set job_id      0
set host_0      ""
set timeout $max_job_delay
spawn $salloc -v -N$node_cnt -t1 $slaunch -n32 --overcommit -l --pmi-threads=32 $bin_hostname  
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "0: ($alpha_numeric)" {
		set host_0 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id == 0} {
			kill_salloc
		} else {
			cancel_job $job_id
		}
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

#
# Verify node registration
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
