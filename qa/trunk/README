This directory contains a battery of SLURM regression tests. The tests make use 
of the "expect" scripting language. You may need to modify the file "globals" 
to identify locations of files to be used in testing. These tests expect single 
node jobs submitted to the default partition to respond within a one minutes. 
If that is not the case, modify the value of "max_job_delay" in the "globals" 
file to an appropriate value or the tests will report failures due to timeouts. 
If there are file propogation delays (e.g. due to NFS), the value of 
"max_file_delay" in the "globals" file may need modification.

Each test can be executed independently. Upon successful completion, the test 
will print "SUCCESS" and terminate with an exit code of zero. Upon failure, 
the test will typically print "FAILURE" and an explanation of the failure. 
The message "WARNING" indicates that the cluster configuration can not fully 
test some option (e.g. only one node or partition) and the test terminates with 
an exit code of zero. In the event of a configuration problem or other 
catastrophic test failure other messages could be printed and their cause 
should be investigated. In either case, failing tests will terminate with a 
non-zero exit code and successful tests will terminate with a zero exit code.

The script "regression" will execute all of the tests and summarize the results.
This script may be modified to test only selected commands (e.g. sinfo command 
tests have the prefix "test4.*"). A summary of each test is shown below.

Tests designed, developed, and supported by Moe Jette <jette1@llnl.gov>
================================================================================


test1.#    Testing of srun options.
===================================
test1.1    Confirm that a job executes with appropriate user id and group id.
test1.2    Confirm that a job executes with the proper task count (--nprocs 
           and --overcommit options).
test1.3    Confirm that srun reports a proper version number (--version option).
test1.4    Confirm that srun usage option works (--usage option).
test1.5    Confirm that srun help option works (--help option).
test1.6    Confirm that srun sets appropriate working directory (--chdir 
           option).
test1.7    Confirm that job time limit function works (--time option).
test1.8    Confirm that basic srun stdin, stdout, and stderr options work 
           (--input, --output, and --error option respectively). 
test1.9    Test of srun verbose mode (--verbose option).
test1.10   Test of srun/slurmd debug mode (--debug option).
test1.11   Test of batch job and job name options (--batch and --job-name 
           options).
test1.12   Test of processors, memory, and temporary disk space 
           constraints options (--mincpus, --mem, and --tmp options).
           Also test that priority zero job is not started (--hold option).
test1.13   Test of immediate allocation option (--immediate option).
test1.14   Test of shared and contiguous options (--shared and --contiguous).
           Also uses --batch and --hold options. Also see test1.53.
test1.15   Test of wait option (--wait option).
test1.16   Confirm that srun buffering can be disabled (--unbuffered option).
test1.17   Confirm that srun allocation mode (--allocate option).
test1.18   Test of srun attach to existing job (--attach and --join options).
test1.19   Test srun stdout/err file name formatting (--output and --error 
           options with %j, %J, %n, %s and %t specifications).
test1.20   Test srun stdout/err disabling (--output and --error options with 
           argument of "none").
test1.21   Test srun stdin routing to specific task (--input option with 
           numeric argument).
test1.22   Confirm that a job executes with various launch thread fanouts
           (--threads option).
test1.23   Verify node configuration specification (--mem, --mincpus, and 
           --tmp options).
test1.24   Verify node configuration specification (--constraint option).
test1.25   Submit job to not be killed on node failure (--no-kill option). 
           NOTE: We need to actually kill slurmd daemons to fully test this.
test1.26   Submit job directly to slurmd without use of slurmctld scheduler.
	   (--no-allocate option). NOTE: Needs to run as SlurmUser or root.
test1.27   Verify the appropriate job environment variables are set.
test1.28   Verify that user environment variables are propogated to the job.
test1.29   Verify that user user limits are propogated to the job.
test1.30   Test of increasing job sizes.
test1.31   Verify that SLURM directed environment variables are processed:
           SLURM_DEBUG, SLURM_NNODES, SLURN_NPROCS, SLURM_OVERCOMMIT, 
           SLURM_STDOUTMODE.
test1.32   Test of srun signal forwarding
test1.33   Test of srun application exit code reporting
**NOTE**   The following tests attempt to utilize multiple CPUs or partitions,
           The test will print "WARNING" and terminate with an exit code of 
           zero if the cluster configuration does not permit proper testing.
test1.50   Confirm that a job executes with the proper task distribution
           (--nodes and --distribution options).
test1.51   Confirm that a job executes with the proper node count
           (--nodes option).
test1.52   Confirm that a job executes with the specified nodes
           (--nodelist and --exclude options).
test1.53   Test of contiguous option with multiple nodes (--contiguous option).
           Also see test1.14.
test1.54   Test of cpus-per-task option on a single node (--cpus-per-task  
           option).
test1.55   Test of partition specification on job submission (--partition  
           option).
test1.56   Confirm node selection from within a job step on existing allocation
           (--nodelist, --exclude, --nodes and --nprocs options).
test1.57   Confirm node selection from within a job step on existing allocation
           (--relative, --nodes and --nprocs options).
test1.58   Basic MPI functionality tests.
UNTESTED   TotalView interaction validation. Expect has limited X Window 
           support.


test2.#    Testing of scontrol options (to be run as unprivileged user). 
========================================================================
test2.1    Validate scontrol version command.
test2.2    Validate scontrol help command.
test2.3    Validate scontrol ping command.
test2.4    Validate scontrol exit, quit, and !! commands.
test2.5    Validate scontrol show commands for configuation, daemons, 
           nodes, and partitions.         
test2.6    Validate scontrol verbose and quite options.
test2.7    Validate scontrol pidinfo command.
test2.8    Validate scontrol show commands for jobs and steps.
test2.9    Validate scontrol completing command.
test2.10   Validate scontrol oneliner mode (--oneliner option).


test3.#    Testing of scontrol options (best run as SlurmUser or root). 
=======================================================================
test3.1    Validate scontrol reconfigure command.
test3.2    Validate scontrol update command for partitions.
test3.3    Validate scontrol update command for nodes.
test3.4    Validate scontrol update command for jobs.
test3.5    Validate scontrol create and delete of partition.
UNTESTED   "scontrol abort"    would stop slurm 
UNTESTED   "scontrol shutdown" would stop slurm


test4.#    Testing of sinfo options.
====================================
test4.1    Confirm sinfo usage option works (--usage option).
test4.2    Confirm sinfo help option works (--help option).
test4.3    Test partition information, both long and short (--long and 
           --summarize options) and partition filtering (--partition option).
test4.4    Test node information, both regular and long (--Node, --long,  
           and --exact options).
test4.5    Test sinfo node information filtering (--state and --nodes options).
test4.6    Test sinfo iteration (--iterate option).
test4.7    Confirm that sinfo verbose option works (--verbose option).
test4.8    Check sinfo output without header (--noheader option).
test4.9    Check sinfo formating options (--format option and SINFO_FORMAT
           environment variable).
test4.10   Confirm that sinfo reports a proper version number (--version 
           option).

test5.#    Testing of squeue options.
=====================================
test5.1    Confirm squeue usage option works (--usage option).
test5.2    Confirm squeue help option works (--help option).
test5.3    Test squeue iteration (--iterate option).
test5.4    Test squeue formating options (--noheader, --format and --step 
           options and SQUEUE_FORMAT environment variable).
test5.5    Test squeue sorting (--sort option).
test5.6    Test squeue filtering (--jobs, --states, --steps and --user option).
test5.7    Confirm that squeue verbose option works (--verbose option).
test5.8    Confirm that squeue reports a proper version number (--version 
           option).


test6.#    Testing of scancel options. 
======================================
test6.1    Validate scancel usage option (--usage option).
test6.2    Validate scancel help option (--help option).
test6.3    Validate scancel interactive mode (--interactive option).
test6.4    Validate scancel job name filter (--name option).
test6.5    Validate scancel verbose option (--verbose option).
test6.6    Confirm that scancel reports a proper version number (-V option).
test6.7    Validate scancel signal option (--signal and --verbose options).
test6.8    Validate scancel state and name filters (--state and --name options).
test6.9    Validate scancel of individual job steps (job.step specification).
test6.10   Validate scancel user and partition filters, delete all remaining 
           jobs (--partition and --user options).
test6.11   Validate scancel quiet option, no warning if job gone 
           (--quiet option).


test9.#    System stress testing. Exercises all commands and daemons.
=====================================================================
test9.1    Stress test of stdin broadcast.
test9.2    Stress test of stdout with stdin closed.
test9.3    Stress test of per-task output files with stdin closed.
test9.4    Stress test of per-task output and input files.
test9.5    Stress test of per-task input files.
test9.6    Stress test of per-task output files.
test9.7    Stress test multiple simultaneous commands via multiple threads.
