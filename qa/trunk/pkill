#!/usr/local/bin/bash
#
# This shell processes pkill commands as required by the test scripts 
# on systems lacking the pkill commands (e.g. AIX). It does not 
# interpret all pkill options, only those required for these tests.
#
# Read command line options
command=""
signal=""
user_id=-1
if [ $1 == "-INT" ]; then
	signal="INT"
fi
if [ $1 == "-KILL" ]; then
	signal="KILL"
fi
if [ $1 == "-USR1" ]; then
	signal="USR1"
fi
if [ $1 == "-USR2" ]; then
	signal="USR2"
fi
if [ $2 == "-u" ]; then
	user_id=$3
fi
command=$4
# Validate command line options
if [ $command == "" ]; then
	echo "Need pattern/command"
	exit 1
fi
if [ $signal == "" ]; then
	echo "Need supported signal"
	exit 1
fi
if [ $user_id -eq -1 ]; then
	echo "Need user ID"
	exit 1
fi
echo "command=$command, signal=$signal, user_id=$user_id"
# Find the appropriate processes and signal them
if [ $signal == "INT" ]; then
	ps -U $user_id | grep " $command$" | awk '{printf "kill -s INT %s\n",$2}' | bash
	exit 0
fi
if [ $signal == "KILL" ]; then
	ps -U $user_id | grep " $command$" | awk '{printf "kill -s KILL %s\n",$2}' | bash
	exit 0
fi
if [ $signal == "USR1" ]; then
	ps -U $user_id | grep " $command$" | awk '{printf "kill -s USR1 %s\n",$2}' | bash
	exit 0
fi
if [ $signal == "USR2" ]; then
	ps -U $user_id | grep " $command$" | awk '{printf "kill -s USR2 %s\n",$2}' | bash
	exit 0
fi
echo "Unsupported signal $signal"
exit 1
