#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Submit job directly to slurmd without use of slurmctld scheduler.
#          (--no-allocate option). NOTE: Needs to run as SlurmUser or root.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2005 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Danny Auble <da@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "8.5"
set exit_code   0
set file_in      "test$test_id.input"
set job_id1 0
set interations 100
		
print_header $test_id
set front_end [test_front_end]
if { $front_end == 0 } {
	send_user "\nWARNING: This test is only compatable with front-end systems\n"
	exit 0
}	

#
# Delete left-over input script
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash" > $file_in
exec echo "$srun $bin_sleep 5" >> $file_in
exec $bin_chmod 700 $file_in

set node_use "COPROCESS"

spawn $srun --batch --output=/dev/null --error=/dev/null -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: job submit failure\n"
	exit 1
}

set part_id ""
spawn $scontrol show job $job_id1
expect {
	-re "PENDING" {
		send_user "WARNING: JOB in a pending state, might not run\n"
		exp_continue	
	}
	-re "Part_ID=($alpha_numeric)" {
		set part_id $expect_out(1,string)
		exp_continue	
	}
}
if {[string compare $part_id ""] == 0} {
	send_user "\nFAILURE: Did not get partition id of task $job_id1\n"
	exit 1	
}

sleep 10
set correct 0
set redo 0
for {set inx 0} {$inx < $interations} {incr inx} {
	spawn $smap -hcDb | grep $part_id
	expect {
		-re "DEALL" {
			sleep 1
			set redo 1
		}	
		-re "FREE" {
			sleep 1
			set redo 1
		}	
		-re $node_use {
			set correct 1
			set redo 0
		}
		-re "READY" {
			set redo 0
		}
		-re "CONF" {
			set redo 1	
		}	
		eof {
			set redo 0
		}
	}
	if { $redo == 0 } {
		break
	}
}
if { $correct == 0} {
	send_user "\nFAILURE: Did not get correct state\n"
	exit 1	
}
spawn $scancel $job_id1
expect {
	-re "Job $job_id1 not found" {
		send_user "\nFAILURE: Job initiation failure\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

set node_use "VIRTUAL"

spawn $srun --batch --node-use=$node_use --output=/dev/null --error=/dev/null -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: job submit failure\n"
	set exit_code 1
}

set part_id ""

spawn $scontrol show job $job_id1
expect {
	-re "PENDING" {
		send_user "WARNING: JOB in a pending state, might not run\n"
		exp_continue	
	}
	-re "Part_ID=($alpha_numeric)" {
		set part_id $expect_out(1,string)
		exp_continue	
	}
}
if {[string compare $part_id ""] == 0} {
	send_user "\nFAILURE: Did not get partition id of task $job_id1\n"
	exit 1	
}

sleep 10
set correct 0
set redo 0
for {set inx 0} {$inx < $interations} {incr inx} {
	spawn $smap -hcDb | grep $part_id
	expect {
		-re "DEALL" {
			sleep 1
			set redo 1
		}	
		-re "FREE" {
			sleep 1
			set redo 1
		}	
		-re $node_use {
			set correct 1
			set redo 0
		}
		-re "READY" {
			set redo 0
		}
		-re "CONF" {
			set redo 1	
		}	
		eof {
			set redo 0
		}
	}
	if { $redo == 0 } {
		break
	}
}
if { $correct == 0} {
	send_user "\nFAILURE: Did not get correct state\n"
	set exit_code 1	
} 

spawn $scancel --quiet $job_id1
expect {
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
