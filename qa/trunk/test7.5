#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validate smap functionality
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2004 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id      "7.5"
set exit_code    0
set iteration    0

print_header $test_id

#
# Check the smap iteration
#
 
spawn $smap --display=s --iterate=2
expect {
	-re "Screen is too small" {
		send_user "\nWARNING: Can not test smap in small window\n"
		exit 0
	}
	-re "This will only run on a" {
		send_user "\nWARNING: Can not yet test on this sytem type\n"
		exit 0
	}
	-re "PARTITION" {
		incr iteration
		if {$iteration >= 3} {
			send "q\n"
		}
		if {$iteration > 4} {
			set smap_pid [exp_pid]
			exec $bin_kill -TERM $smap_pid
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: smap not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$iteration < 3} {
	send_user "\nFAILURE: smap iteration error\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
