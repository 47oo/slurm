#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Confirm node selection from within a job step on existing allocation
#          (--nodelist, --exclude, --nodes and --nprocs options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id     "1.56"
set exit_code   0
set file_in     "test$test_id.input"
set prompt      "SLURM_QA_PROMPT: "

print_header $test_id

#
# Delete left-over input script file
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"                >$file_in
exec echo "export PS1=\"$prompt\"  "  >>$file_in
exec echo "$bin_bash -norc"           >>$file_in
exec $bin_chmod 700 $file_in

#
# Submit a 2 node job
#
set timeout $max_job_delay
spawn $srun -N2 -A $file_in
expect {
	-re "More ($alpha) requested than permitted" {
		send_user "\nWARNING: can't test srun task distribution\n"
		exec $bin_rm -f $file_in
		exit $exit_code
	}
	"$prompt" {
		send_user "Job initiated\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exec $bin_rm -f $file_in
		exit 1
	}
	eof {
		send_user "\nFAILURE: srun terminated\n"
		kill_srun
		exec $bin_rm -f $file_in
		exit 1
	}
}
exec $bin_rm -f $file_in

#
# Get node names
#
set host_0      ""
set host_1      ""
send "$srun -l $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		set host_0 $expect_out(1,string)
		exp_continue
	}
	-re "1: ($alpha_numeric)" {
		set host_1 $expect_out(1,string)
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}

#
# Verify node count
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_1 ""] == 0} {
        send_user "\nFAILURE: Did not get hostname of task 1\n"
	set exit_code   1	
}
if {$exit_code != 0} {
	exit $exit_code
}

#send_user "\nhost_0:$host_0:host_1:$host_1:\n"
#
# Exclude specific node
#
set matches 0
send "$srun -l -N1 -n1 --exclude=$host_0 $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		if {[string compare $expect_out(1,string) $host_1] == 0} {
			incr matches
		} else {
			send_user "\nFAILURE: wrong node responded\n"
			set exit_code   1	
		}
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: required node failed to respond\n"
	set exit_code   1
}

#
# Exclude specific node
#
set matches 0
send "$srun -l -N1 -n1 --exclude=$host_1 $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		if {[string compare $expect_out(1,string) $host_0] == 0} {
			incr matches
		} else {
			send_user "\nFAILURE: wrong node responded\n"
			set exit_code   1	
		}
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: required node failed to respond\n"
	set exit_code   1
}

#
# Include specific node
#
set matches 0
send "$srun -l -N1 -n1 --nodelist=$host_0 $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		if {[string compare $expect_out(1,string) $host_0] == 0} {
			incr matches
		} else {
			send_user "\nFAILURE: wrong node responded\n"
			set exit_code   1	
		}
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: required node failed to respond\n"
	set exit_code   1
}

#
# Include specific node
#
set matches 0
send "$srun -l -N1 -n1 --nodelist=$host_1 $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		if {[string compare $expect_out(1,string) $host_1] == 0} {
			incr matches
		} else {
			send_user "\nFAILURE: wrong node responded\n"
			set exit_code   1	
		}
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: required node failed to respond\n"
	set exit_code   1
}

#
# Error test: Overlapping include/exclude node list
#
set matches 0
send "$srun -l -N1 -n1 --nodelist=$host_0 --exclude=$host_0 $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		send_user "\nFAILURE: wrong node responded\n"
		set exit_code   1
		exp_continue
	}
	"error:" {
		send_user "No worries, this error was expected.\n"
		incr matches
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: No error for overlapping include/exclude node list\n"
	set exit_code   1
}

#
# Error test: Exceed node count
#
set matches 0
send "$srun -l -N3 -n3 -O $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		send_user "\nFAILURE: wrong node responded\n"
		set exit_code   1
		exp_continue
	}
	"error:" {
		send_user "No worries, this error was expected.\n"
		incr matches
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: No error for exceeding node count\n"
	set exit_code   1
}

#
# Run with fewer nodes
#
set test_0      ""
set test_1      ""
send "$srun -l -N1-1 -n2 -O $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		set test_0 $expect_out(1,string)
		exp_continue
	}
	-re "1: ($alpha_numeric)" {
		set test_1 $expect_out(1,string)
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {[string compare $test_0 $test_1] != 0} {
	send_user "\nFAILURE: Multiple nodes responded, should be only one\n"
	set exit_code   1
}

#
# Error test: Exceed task count, first get the processor count then exceed it
#
set processors 1
send "$srun -l -c1 $bin_hostname\n"
expect {
	-re "($number): ($alpha_numeric)" {
		incr processors
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
set matches 0
send "$srun -l -n $processors $bin_hostname\n"
expect {
	-re "0: ($alpha_numeric)" {
		send_user "\nFAILURE: wrong node responded\n"
		set exit_code   1
		exp_continue
	}
	"error:" {
		send_user "No worries, this error was expected.\n"
		incr matches
		exp_continue
	}
	"$prompt" {
		send_user "srun completed\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: No error for exceeding processor count\n"
	set exit_code   1
}

#
# Post-processing
#
send "exit\n"
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
