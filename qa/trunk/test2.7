#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Validate scontrol pidinfo command.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id     "2.7"
set exit_code   0
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set file_err    "test$test_id.error"
set job_id      0
set scontrol_id 0

print_header $test_id

#
# Delete left-over input script plus stdout/err files
# Build input script file
#
exec $bin_rm -f $file_in $file_out $file_err
exec echo "#!$bin_bash"                >$file_in
exec echo "$scontrol pidinfo \$\$"    >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a srun batch job that uses stdout/err and confirm their contents
#
spawn $srun --batch --output=$file_out --error=$file_err -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exec $bin_rm -f $file_in
	exit 1
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	exec $bin_rm -f $file_in
	exit 1
}

#
# Verify job_id in output file
#
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "job id ($number)" {
			set scontrol_id $expect_out(1,string)
			exp_continue
		}
		eof {
		}
	}
}

if {$job_id != $scontrol_id} {
	send_user "\nFAILURE: scontrol pidinfo error\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
	exec $bin_rm -f $file_in $file_out $file_err
}
exit $exit_code
