#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Confirm that job time limit function works (-t option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id      "1.7"
set exit_code    0
set timed_out    0
set completions  0

set sleep_time   180

print_header $test_id

#
# Execute a couple of three minute jobs; one with a one minute time  
# limit and the other with a four minute time limit. Confirm jobs 
# are terminated on a timeout as required. Note that SLURM time 
# limit enforcement has a resolution of about one minute. 
#
# Ideally the job gets a "job exceeded timelimit" followed by a 
# "Terminated" message, but if the timing is bad only the "Terminated" 
# message gets sent
#
set timeout [expr $max_job_delay + $sleep_time]
spawn $srun -t1 $bin_sleep $sleep_time
expect {
	-re "job exceeded timelimit" {
		send_user "This error is expected, no worries\n"
		incr timed_out
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

set timeout [expr $max_job_delay + (4 * 60)]
spawn $srun -t4 $bin_sleep $sleep_time
expect {
	-re "job exceeded timelimit" {
		incr completions -1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
		incr completions
	}
}

if {($timed_out < 1) || ($completions != 1)} {
	send_user "\nFAILURE: time limit controls failed\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
