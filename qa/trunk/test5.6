#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test squeue filtering (--jobs, --states, --steps and --user option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id      "5.6"
set exit_code    0
set file_in      "test$test_id.input"
set job_id1      0
set job_id2      0

print_header $test_id

#
# Delete left-over input script
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"                      >$file_in
exec echo "$srun $bin_sleep $max_job_delay" >>$file_in
exec $bin_chmod 700 $file_in

#
# Submit a couple of job so we have something to look at
#
spawn $srun --batch --output=/dev/null --error=/dev/null -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: srun job submit failure\n"
	kill_srun
	exit 1
}

spawn $srun --batch --output=/dev/null --error=/dev/null --hold -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: srun job submit failure\n"
	kill_srun
	exit 1
}

#
# Check the squeue job filter option
#
set job_found 0
spawn $squeue --format=%i --jobs $job_id2 
expect {
	-re "($number)" {
		set tmp_id $expect_out(1,string)
		if {$tmp_id == $job_id2} {
			set job_found 1
		} else {
			send_user "\nFAILURE: squeue reported invalid job_id\n"
			set exit_code 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$job_found == 0} {
	send_user "\nFAILURE: squeue failed to locate desired job\n"
	set exit_code 1
}

#
# Check the squeue state filter option
#
spawn $squeue --format=%t --noheader --states=PD 
expect {
	-re "($alpha_cap)" {
		if {[string compare $expect_out(1,string) "PD"]} {
			send_user "\nFAILURE: squeue state filter failure\n"
			set exit_code 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Check the squeue user filter option
#
spawn $bin_id -un 
expect {
	-re "($alpha_numeric)" {
		set this_user $expect_out(1,string)
		exp_continue
	}
	eof {
	}
}
spawn $squeue --format=%u --noheader --user=$this_user 
expect {
	-re "($alpha_numeric)" {
		if {[string compare $expect_out(1,string) $this_user]} {
			send_user "\nFAILURE: squeue user filter failure\n"
			set exit_code 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Check the squeue partition filter option
#
# First get partition name(s)
set partition1 ""
set partition2 ""
spawn $squeue --format=%P --noheader 
expect {
	-re "($alpha_numeric)" {
		if {![string compare $partition1 ""]} {
			set partition1 $expect_out(1,string)
		}
		if {[string compare $expect_out(1,string) $partition1]} {
			set partition2 $expect_out(1,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {[string compare partition2 ""]} {
	set partition1 $partition2
}
spawn $squeue --format=%P --noheader --partitions=$partition1
expect {
	-re "($alpha_numeric)" {
		if {[string compare $expect_out(1,string) $partition1]} {
			send_user "\nFAILURE: squeue partition filter error\n"
			set exit_code 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Wait long enough to make sure the job step is running and has
# started its job steps. Check the squeue job step filter option
#
wait_for_job $job_id1 "RUNNING"
exec $bin_sleep 2
set job_found 0
spawn $squeue --format=%i --steps $job_id1.0 
expect {
	-re "($number).($number)" {
		set tmp_id $expect_out(1,string)
		if {$tmp_id == $job_id1} {
			set job_found 1
		} else {
			send_user "\nFAILURE: squeue reported invalid job_step_id\n"
			set exit_code 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$job_found == 0} {
	send_user "\nFAILURE: squeue failed to locate desired job step\n"
	set exit_code 1
}

cancel_job $job_id2
cancel_job $job_id1
exec $bin_rm -f $file_in
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code

