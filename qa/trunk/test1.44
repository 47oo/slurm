#!/usr/bin/expect
############################################################################
# Purpose: Run "srun cat" and read srun's stdout SLOWLY, creating
#          stdout back pressure in srun.  (srun used to lose data on stdout
#          in this situation.)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test1.59.output
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id      "1.59"
set cycle_count  3
set exit_code    0
set file_in      "test$test_id.input"
set file_out     "test$test_id.output"
set file_err     "test$test_id.error"
set task_cnt     1

print_header $test_id

# Execute an srun job to cat input_file.  Read srun's stdout
# SLOWLY to create back pressure which used to reveal a stdout data-loss bug.
# Write the srun's stdout to a file so that the caller can compare the sizes
# of input_file and output_file.
proc run_cat_backpressure { input_file output_file } {
    global bin_cat bin_rm number srun node_cnt other_opts task_cnt timeout file_err

    send_user "Running run_cat_backpressure\n"
    exec $bin_rm -f $output_file

    set output [open $output_file w]
    set srun_output [open "| $srun -e $file_err -N1 $bin_cat $input_file" r]
    while {![eof $srun_output]} {
	after 1 [puts -nonewline $output [read $srun_output 1]]
    }
    flush $output
    close $output
}

#
# Create a sizable text file
#
exec $bin_rm -f $file_in $file_out
for {set inx 0} {$inx < 10} {incr inx} {
    exec $bin_cat /etc/hosts  >>$file_in
    exec $bin_cat /etc/passwd >>$file_in
}
set stdin_lines [get_line_cnt $file_in]
set stdout_target [expr $stdin_lines * $task_cnt]

#
# Run cycle_count jobs to copy job input to job output and compare sizes
#
set success_cnt 0
set timeout $max_job_delay
for {set inx 0} {$inx < $cycle_count} {incr inx} {
	run_cat_backpressure $file_in $file_out
	set stdout_lines [get_line_cnt $file_out]
	if {$stdout_lines != $stdout_target} {
		exec $bin_sleep 1
		set stdout_lines [get_line_cnt $file_out]
	}
	if {$stdout_lines != $stdout_target} {
		send_user "\nFAILURE: stdout is incomplete\n"
	        return 1
	        break
	} else {
	    send_user "Incrementing\n"
		incr success_cnt
	}
}
exec $bin_rm -f $file_in $file_out $file_err

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
} else {
	send_user "\nFAILURE\n"
}
exit $exit_code
