#!/usr/bin/expect
############################################################################
# Purpose: Stress test with maximum slurmctld message concurrency.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id      "9.8"
set exit_code    0
set file_in      "test$test_id.input"
set job_cnt      10
set delay        20
set task_cnt     60

print_header $test_id

#
# Delete left-over input script
# Build input script file
# NOTE: The initial sleep is so that all of the submissions have time 
#   to occur before contending with a multitude of job step creations.
#   This is especially important on very slow systems (e.g. AIX).
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"              >$file_in
exec echo "$bin_sleep $delay"       >>$file_in
exec echo "inx=0"                   >>$file_in
exec echo "while \[ \$inx -le $task_cnt ]" >>$file_in
exec echo "do"                      >>$file_in
exec echo "$srun $bin_sleep 120 &"  >>$file_in
exec echo "inx=\$((inx+1))"         >>$file_in
exec echo "done"                    >>$file_in
exec echo "$srun $bin_sleep 120 "   >>$file_in
exec $bin_chmod 700 $file_in

#
# Initiate $job_cnt batch jobs
#
set start_cnt 0
set timeout $delay
for {set inx 0} {$inx < $job_cnt} {incr inx} {
	spawn $srun --batch --output=/dev/null --error=/dev/null -t5 $file_in
	expect {
		-re "jobid ($number) submitted" {
			incr start_cnt
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: srun not responding\n"
			kill_srun
			exit 1
		}
		eof {
			wait
		}
	}
}
if {$start_cnt < $job_cnt} {
	send_user "\nFAILURE: not all jobs submitted\n"
	set exit_code 1
}

#
# Give the jobs a few seconds to get initiated, then kill them all
#
exec $bin_sleep $delay
spawn $bin_id --user --name
expect {
	-re "($alpha_numeric)" {
		set user_name $expect_out(1,string)
	}
	eof {
		wait
	}
}
exec $scancel --quiet --user $user_name

#
# Give a few seconds for clean-up and insure things are still fine
#
exec $bin_sleep $delay
spawn $squeue --noheader --user $user_name
expect {
	-re "$user_name *CG" {
		exp_continue
	}
	-re "$user_name" {
		send_user "\nFAILURE: jobs not all gone\n"
		set exit_code 1
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
