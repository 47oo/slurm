#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Check node information, both regular and long (--Node, --long,  
#          and --exact options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id     "4.4"
set exit_code   0
set matches     0

print_header $test_id

#
# Check the sinfo regular format
#
 
spawn $sinfo --Node  
expect {
	-re "NODE_LIST" {
		incr matches
		exp_continue
	}
	-re "#NODES " {
		incr matches
		exp_continue
	}
	-re "PARTITION" {
		incr matches
		exp_continue
	}
	-re "STATE" {
		incr matches
		exp_continue
	}
	-re "CPUS" {
		incr matches -10
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sinfo not responding\n"
		set exit_code 1
	}
	eof {
	}
}

if {$matches != 4} {
	send_user "\nFAILURE: sinfo node format error\n"
	set exit_code 1
}


#
# Check the sinfo long format
#
 
set matches     0
set ranges      0
spawn $sinfo --Node --long --exact
expect {
	-re "NODE_LIST" {
		incr matches
		exp_continue
	}
	-re "#NODES " {
		incr matches
		exp_continue
	}
	-re "PARTITION" {
		incr matches
		exp_continue
	}
	-re "STATE" {
		incr matches
		exp_continue
	}
	-re "CPUS" {
		incr matches
		exp_continue
	}
	-re "($number)(.)" {
		if (![string compare $expect_out(2,string) "+"]) {
			set ranges 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sinfo not responding\n"
		set exit_code 1
	}
	eof {
	}
}

if {$ranges != 0} {
	send_user "\nFAILURE: sinfo exact match option failure\n"
	set exit_code 1
}

if {$matches != 5} {
	send_user "\nFAILURE: sinfo node long format error\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
