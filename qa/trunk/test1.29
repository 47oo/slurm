#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Verify that user user limits are propogated to the job.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id          "1.29"
set exit_code        0
set file_err         "test$test_id.error"
set file_in          "test$test_id.input"
set file_out         "test$test_id.output"
set file_prog_get    "test$test_id.prog"
set job_id           0
set limit_core       943
set limit_fsize      274515
set limit_nofile     1386
set limit_nproc      863
set matches          0

print_header $test_id

#
# Delete left-over programs and rebuild them.
# We use our own program to get ulimit values since the output 
# of the ulimit program is inconsistent across systems.
#
exec $bin_rm -f $file_prog_get $file_err $file_in $file_out
exec $bin_make $file_prog_get
exec $bin_chmod 700 $file_prog_get

exec echo "#!$bin_bash"               >$file_in
exec echo "ulimit -c $limit_core"    >>$file_in
exec echo "ulimit -f $limit_fsize"   >>$file_in
exec echo "ulimit -n $limit_nofile"  >>$file_in
exec echo "ulimit -u $limit_nproc"   >>$file_in
exec echo "$srun -N1 $file_prog_get" >>$file_in

exec $bin_chmod 700 $file_in

#
# Spawn a job via srun to print environment variables and user limits
#
set timeout $max_job_delay
spawn $srun --batch --output=$file_out --error=$file_err -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	exit 1
}

#
# Inspect the job's output file
#
if {[wait_for_file $file_out] != 0} {
	exit 1
}
spawn $bin_sort $file_out
expect {
	-re "USER_CORE=($number)" {
		if {$expect_out(1,string) == [expr $limit_core * 1024]} {
			incr matches
		}
		exp_continue
	}
	-re "USER_FSIZE=($number)" {
		if {$expect_out(1,string) == [expr $limit_fsize * 1024]} {
			incr matches
		}
		exp_continue
	}
	-re "USER_NOFILE=($number)" {
		if {$expect_out(1,string) == $limit_nofile} {
			incr matches
		}
		exp_continue
	}
	-re "USER_NPROC=($number)" {
		if {$expect_out(1,string) == $limit_nproc} {
			incr matches
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sort not responding\n"
		set exit_code 1
	}
	eof {
	}
}

if {$matches != 4} {
	send_user "\nFAILURE: User limits not propogated\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
        exec $bin_rm -f $file_err $file_in $file_prog_get $file_out

}
exit $exit_code
