#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test of srun attach to existing job (--attach and --join options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory
#          named test1.18.prog
#
source ./globals

set test_id     "1.18"
set exit_code   0
set file_prog   "test$test_id.prog"
set job_id      0
set matches     0

print_header $test_id

#
# Delete left-over program and rebuild it
#
exec $bin_rm -f $file_prog
exec $bin_make $file_prog
exec $bin_chmod 700 $file_prog

#
# Spawn initial program via srun
#
set timeout $max_job_delay
spawn $srun -N1 -v -t5 $file_prog
set init_id $spawn_id
expect {
        -i $init_id
	-re "launching ($number).0 on host" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "WAITING" {
		incr matches
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job submit failure\n"
	exit 1
}
if {$matches == 0} {
	send_user "\nFAILURE: job run time failure\n"
	set exit_code   1
}

#
# Attach to initial program via srun
#
set matches     0
spawn $srun --attach=$job_id --join
set attach_id $spawn_id
expect {
        -i $attach_id
	-re "WAITING" {
		incr matches
		send -i $attach_id "exit\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: job run time failure\n"
	set exit_code   1
}

#
# Make sure initial program terminates too
#
expect {
        -i $init_id
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		set exit_code   1
	}
	eof {
	}
}

exec $bin_rm -f $file_prog
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
} else {
	cancel_job $job_id
}
exit $exit_code
