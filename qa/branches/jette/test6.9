#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test scancel of individual job steps (job.step specification).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test6.9.input
#
source ./globals

set test_id     "6.9"
set exit_code   0
set file_in     "test$test_id.input"
set job_id      0

print_header $test_id

#
# Delete left-over input script files
# Build input script file
# The "sleep 1" insures the background tasks is step 0 and foreground tasks is step 1
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"                        >$file_in
exec echo "$srun $bin_sleep $max_job_delay &" >>$file_in
exec echo "$bin_sleep 1"                      >>$file_in
exec echo "$srun $bin_sleep $max_job_delay"   >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn srun batch job
#
spawn $srun --batch --output=/dev/null --error=/dev/null --job-name=job.$test_id -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}
exec $bin_rm -f $file_in

if {[wait_for_job $job_id RUNNING] != 0} {
	send_user "\nFAILURE: error on job\n"
	exit 1
}
sleep 2

#
# Kill single job steps individually
#
set matches  0
spawn $scancel --interactive $job_id.0
expect {
	-re "Cancel step_id=$job_id.0*\? " {
		send "y\n"
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel with step_id failed\n"
	set exit_code 1
}

set matches  0
spawn $scancel --interactive $job_id.1
expect {
	-re "Cancel step_id=$job_id.1*\? " {
		send "y\n"
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel with step_id failed\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
