#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test of partition specification on job submission (--partition  
#          option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id          "1.55"
set def_part_name    ""
set exit_code        0
set file_in          "test$test_id.input"
set job_id           0
set other_part_name  ""

print_header $test_id

#
# Identify the partitions in the cluster, identifying the default
#
spawn $sinfo --summarize  
expect {
	-re "($end_of_line)($alpha_numeric)(\[ \*\]) *UP" {
		if (![string compare $expect_out(3,string) "*"]) {
			set def_part_name   $expect_out(2,string)
		} else {
			set other_part_name $expect_out(2,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sinfo not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Delete left-over input script files
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"                      >$file_in
exec echo "$srun $bin_sleep $max_job_delay" >>$file_in
exec $bin_chmod 700 $file_in

#
# Submit a batch job explicitly to the default partition
#
set job_id           0
spawn $srun --batch --output=/dev/null --error=/dev/null --hold --partition=$def_part_name -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
# Confirm the job's partition
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	set exit_code 1
} else {
	set read_part ""
	spawn $scontrol show job $job_id
	expect {
		-re "Partition=($alpha_numeric)" {
			set read_part $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
		}
	}
	if ([string compare $read_part $def_part_name]) {
		send_user "\nFAILURE: Improper partition selected\n"
		set exit_code 1
	}
	cancel_job $job_id
}

#
# Test if a non-default partition exists, terminate if none
#
if (![string compare $other_part_name ""]) {
	send_user "\nWARNING: can't test srun partition option"
	send_user " only the default partition exists\n"
	exec $bin_rm -f $file_in
	exit $exit_code
}

#
# Submit job explicitly to a non-default partition
#
set job_id           0
spawn $srun --batch --output=/dev/null --error=/dev/null --hold --partition=$other_part_name -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
exec $bin_rm -f $file_in
# Confirm the job's partition
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	set exit_code 1
} else {
	set read_part ""
	spawn $scontrol show job $job_id
	expect {
		-re "Partition=($alpha_numeric)" {
			set read_part $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
		}
	}
	if ([string compare $read_part $other_part_name]) {
		send_user "\nFAILURE: Improper partition selected\n"
		set exit_code 1
	}
	cancel_job $job_id
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
