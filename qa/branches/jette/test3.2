#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Validate scontrol update command for partitions.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id        "3.2"
set authorized     1
set exit_code      0
set part_name      ""
set part_old_state ""
set part_new_state ""
set read_state     ""

print_header $test_id

#
# Identify a partition and its state
#
spawn $scontrol show part  
expect {
	-re "PartitionName=($alpha_numeric) " {
		if {[string compare $part_name ""] == 0} {
			set part_name $expect_out(1,string)
			set part_old_state ""
		}
		exp_continue
	}
	-re "State=($alpha_cap) " {
		if {[string compare $part_old_state ""] == 0} {
			set part_old_state $expect_out(1,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Validate current partition information
#
if {[string compare $part_name ""] == 0} {
	send_user "\nFAILURE: scontrol unable to identify any partition\n"
	exit 1
}
if {[string compare $part_old_state ""] == 0} {
	send_user "\nFAILURE: scontrol unable to identify state of"
	send_user " partition $part_name\n"
	exit 1
}
if {[string compare $part_old_state "UP"] == 0} {
	set part_new_state "DOWN"
}
if {[string compare $part_old_state "DOWN"] == 0} {
	set part_new_state "UP"
}
if {[string compare $part_new_state ""] == 0} {
	send_user "\nFAILURE: state of partition $part_name is"
	send_user " invalid: $part_old_state\n"
	exit 1
}

#
# Change that partition's state
#
spawn $scontrol update PartitionName=$part_name State=$part_new_state  
expect {
	-re "slurm_update error: ($alpha_numeric) ($alpha_numeric)" {
		set access_err 0
		set err_msg1 $expect_out(1,string)
		set err_msg2 $expect_out(2,string)
		if {[string compare $err_msg1 "Invalid"]} {
			set access_err 1
		}
		if {[string compare $err_msg2 "user"]} {
			set access_err 1
		}
		if {$access_err == 1} {
			send_user "\nFAILURE: scontrol update error\n"
			set exit_code 1
		} else {
			set authorized 0
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Validate partition's new state
#
spawn $scontrol show partition $part_name
expect {
	-re "State=($alpha_cap) " {
		set read_state $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$authorized == 1} {
	if {[string compare $read_state $part_new_state] != 0} {
		send_user "\nFAILURE: scontrol state change error\n"
		set exit_code 1
	}
}

#
# Return that partition's state to its old value
#
spawn $scontrol update PartitionName=$part_name State=$part_old_state  
expect {
	-re "slurm_update error: Invalid user id" {
		exp_continue
	}
	-re "slurm_update error:" {
		send_user "\nFAILURE: scontrol update error\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Record that partition's state
#
spawn  $scontrol show partition $part_name
expect {

	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
