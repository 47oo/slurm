#!/usr/bin/expect
#
# Purpose: Stress test of per-task input files
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory
#          named test9.5.input, test9.5.[0-9]+.input, and test9.5.output
#
source ./globals

set test_id       "9.5"
set cycle_count   100
set exit_code     0
set file_in       "test$test_id.input"
set file_in_task  "test$test_id.%t.input"
set file_out      "test$test_id.output"
set node_cnt      "1-4"
set other_opts    "-O"
set task_cnt      $max_stress_tasks

print_header $test_id

# Execute an srun job to print hostname to output_file with task_cnt tasks 
# per node, wait for completion
# Returns 0 on successful completion, returns 1 otherwise
proc run_cat_job { input_file output_file } {
	global bin_cat bin_rm number srun node_cnt other_opts task_cnt
	exec $bin_rm -f $output_file

	spawn $srun -e - -i $input_file -o $output_file -N$node_cnt -n$task_cnt $other_opts -t1 $bin_cat -
	expect {
		timeout {
			send_user "\nFAILURE: srun not responding\n"
			kill_srun
			return 1
		}
		eof {
		}
	}
	return [wait_for_file $output_file]
}

#
# Create a sizable text file
#
exec $bin_rm -f $file_in $file_out
exec $bin_cat /etc/hosts   >$file_in
exec $bin_cat /etc/passwd >>$file_in
set stdin_lines [get_line_cnt $file_in]
set stdout_target [expr $stdin_lines * $task_cnt]

# Make a text file for each task
exec $srun -e /dev/null -i $file_in -o $file_in_task -N$node_cnt -n$task_cnt $other_opts -t1 $bin_cat

#
# Run cycle_count jobs to copy job input to job output and compare sizes
#
set success_cnt 0
set timeout $max_job_delay
for {set inx 0} {$inx < $cycle_count} {incr inx} {
	if {[run_cat_job $file_in_task $file_out]} {
		set exit_code 1
	}
	set stdout_lines [get_line_cnt $file_out]
	if {$stdout_lines != $stdout_target} {
		send_user "\nFAILURE:stdout is missing output\n"
		set exit_code 1
	} else {
		incr success_cnt
	}
}
# Destroy all input/output files
exec $bin_rm -f $file_in $file_out
for {set tsk 0} {$tsk < $task_cnt} {incr tsk} {
	set file_in_glob "test$test_id.$tsk.input"
	exec $bin_rm -f $file_in_glob
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
} else {
	send_user "\nFAILURE: Only $success_cnt of "
	send_user "$cycle_count task I/O tests passed\n"
}
exit $exit_code
