#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test scancel user and partition filters, delete all remaining jobs 
#          (--partition and --user options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test6.10.input
#
source ./globals

set test_id       "6.10"
set default_part  ""
set exit_code     0
set file_in       "test$test_id.input"
set job_id        0

print_header $test_id

#
# Execute 'id' to determine my login name
#

set got_login 0
spawn $bin_id -un
expect {
        -re "($alpha_numeric)" {
		set my_login $expect_out(1,string)
		set got_login 1
		exp_continue
	}
	eof {
	}
}

if { $got_login == 0 } {
	send_user "\nFAILURE: Unable to get login name\n"
	exit 1
}

#
# Delete left-over input script files
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"                      >$file_in
exec echo "$srun $bin_sleep $max_job_delay" >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a srun batch job
#
spawn $srun --batch --output=/dev/null --error=/dev/null --hold -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}
exec $bin_rm -f $file_in

#
# Identify this job's parition
#
set matches  0
spawn $scancel --interactive $job_id
expect {
	-re "Cancel job_id=$job_id .* partition=($alpha_numeric) .*\? " {
		set default_part $expect_out(1,string)
		send "n\n"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}

#
# Kill all jobs by parition and user
#
spawn $scancel --interactive --user=$my_login --partition=NO_VAL
expect {
	-re "Cancel job_id=$job_id .* partition=NO_VAL .*\? " {
		send "n\n"
		exp_continue
	}
	-re "Cancel job_id=$job_id .* partition= .*\? " {
		send "n\n"
		send_user "\nFAILURE: scancel partition filter failure\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}

spawn $scancel --interactive --user=$my_login --partition=$default_part
expect {
	-re "Cancel job_id=.* partition=$default_part .*\? " {
		send "n\n"
		exp_continue
	}
	-re "Cancel job_id=.* partition= .*\? " {
		send "n\n"
		send_user "\nFAILURE: scancel partition filter failure\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}

spawn $scancel --verbose --user=$my_login
expect {
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}

set matches 0
spawn $scancel --verbose --user=$my_login
expect {
	-re "Signal 9 to job" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
	}
}

if {$matches != 0} {
	send_user "\nFAILURE: scancel user filter failed\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
