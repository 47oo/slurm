#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test of processors, memory, and temporary disk space 
#          constraints options (--mincpus, --mem, and --tmp options).
#          Also test that priority zero job is not started (--hold 
#          option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test1.12.input, test1.12.output, and test1.12.error
#
source ./globals

set test_id     "1.12"
set exit_code   0
set file_in     "test$test_id.input"
set job_id      0

set cpu_cnt              1
set mem_size             13
set tmp_size             2
set matches              0

print_header $test_id

#
# Delete left-over input script
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"          >$file_in
exec echo "$srun $bin_sleep 10" >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a srun batch job with constraints and stdout/err
#
spawn $srun --batch --output=none --error=none --mincpus=$cpu_cnt --mem=$mem_size --tmp=$tmp_size --hold -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}
exec $bin_rm -f $file_in

#
# Confirm constraints are registered and wait for job completion
#
spawn $scontrol show job $job_id
expect {
	-re "JobState=PENDING" {
		incr matches
		send_user "match of JobState\n"
		exp_continue
	}
	-re "Priority=($number)" {
		set read_prio $expect_out(1,string)
		if {$read_prio == 0} {
			incr matches
			send_user "match of Priority\n"
		}
		exp_continue
	}
	-re "MinProcs=($number)" {
		set read_proc $expect_out(1,string)
		if {$read_proc == $cpu_cnt} {
			incr matches
			send_user "match of MinProcs\n"
		}
		exp_continue
	}
	-re "MinMemory=($number)" {
		set read_mem $expect_out(1,string)
		if {$read_mem == $mem_size} {
			incr matches
			send_user "match of MinMemory\n"
		}
		exp_continue
	}
	-re "MinTmpDisk=($number)" {
		set read_disk $expect_out(1,string)
		if {$read_disk == $tmp_size} {
			incr matches
			send_user "match of MinTmpDisk\n"
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		cancel_job $job_id
		set exit_code 1
	}
	eof {
	}
}
cancel_job $job_id

if {$matches != 5} {
	send_user "\nFAILURE: Did not get proper constraints\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
