#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Validate scontrol show commands for jobs and steps.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id     "2.8"
set exit_code   0
set file_in     "test$test_id.input"
set job_id1     0
set job_id2     0

print_header $test_id

#
# Delete left-over input script
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"            >$file_in
exec echo "$srun $bin_sleep 60 &" >>$file_in
exec echo "$srun $bin_sleep 60"   >>$file_in
exec $bin_chmod 700 $file_in

#
# Submit a couple jobs so we have something to work with
#
spawn $srun --batch --output=/dev/null --error=/dev/null -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}
spawn $srun --batch --output=/dev/null --error=/dev/null -t5 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		cancel_job $job_id1
		kill_srun
		exit 1
	}
	eof {
	}
}
exec $bin_rm -f $file_in

#
# Look at all jobs with scontrol
#
set matches 0
spawn $scontrol show job
expect {
	-re "JobId=$job_id1 " {
		incr matches
		exp_continue
	}
	-re "JobId=$job_id2 " {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 2} {
	send_user "\nFAILURE: scontrol failed to find all jobs\n"
	set exit_code 1
}

#
# Look at a specific job with scontrol
#
set matches 0
spawn $scontrol show job $job_id1
expect {
	-re "JobId=$job_id1 " {
		incr matches
		exp_continue
	}
	-re "JobId=" {
		send_user "\nFAILURE: scontrol filter by job id\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol failed to find requested job\n"
	set exit_code 1
}

#
# Wait for job to start running then give the step a chance to start tasks
#
if {[wait_for_job $job_id1 RUNNING] != 0} {
	send_user "\nFAILURE: waiting for job $job_id1 to run\n"
	set exit_code 1
}
sleep 2

#
# Look at all job steps with scontrol
#
set matches 0
spawn $scontrol show step
expect {
	-re "StepId=$job_id1.0 " {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol failed to find all job steps\n"
	set exit_code 1
}

#
# Look at specific job step with scontrol
#
set matches 0
spawn $scontrol show step $job_id1.0
expect {
	-re "StepId=$job_id1.0 " {
		incr matches
		exp_continue
	}
	-re "StepId=" {
		send_user "\nFAILURE: scontrol filter by step id\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol failed to find all job steps\n"
	set exit_code 1
}

cancel_job $job_id1
cancel_job $job_id2
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code

