#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Test of cpus-per-task option on a single node (--cpus-per-task  
#          option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# NOTE:    This assumes node names are of the form <alpha><number>, where 
#          the value of <number> indicates the nodes relative location. 
#          Change tha node name parsing logic as needed for other formats.
#
source ./globals

set test_id     "1.54"
set exit_code   0

print_header $test_id

#
# Submit a 1 node job to determine the node's CPU count
#
set cpu_count      0
set host           ""
set timeout $max_job_delay
spawn $srun -N1 --cpus-per-task=1 -l -t1 $bin_hostname  
expect {
	-re "$number: ($alpha_numeric)" {
		set host $expect_out(1,string)
		incr cpu_count
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

#
# Check CPU count
#
if {[string compare $host ""] == 0} {
	send_user "\nFAILURE: Did not get hostname\n"
	set exit_code   1	
}
if {$cpu_count < 2} {
	send_user "\nWARNING: The node only has one CPU\n"
	exit $exit_code
}

#
# Submit a 1 node job to determine the node's CPU count
#
set read_cpus 0
spawn $srun -N1 --cpus-per-task=2 --nodelist=$host -l -t1 $bin_hostname  
expect {
	-re "$number: ($alpha_numeric)" {
		incr read_cpus
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

#
# Check CPU count
#
if {$read_cpus != [expr $cpu_count / 2]} {
	send_user "\nFAILURE: Improper task count for given cpus-per-task\n"
	set exit_code   1	
}


if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
