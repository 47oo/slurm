#!/usr/bin/expect
#
# Purpose: Test of SLURM functionality
#          Submit job directly to slurmd without use of slurmctld scheduler.
#   (--no-allocate option). NOTE: Needs to run as SlurmUser or root.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
source ./globals

set test_id     "1.26"
set exit_code   0

print_header $test_id

#
# Submit a 1 node job and record the node name
#
set host_0      ""
set timeout $max_job_delay
spawn $srun -N1 -l -t1 $bin_hostname  
expect {
	-re "0: ($alpha_numeric)" {
		set host_0 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

#
# Verify node count
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	exit 1	
}
set include_node $host_0


#
# Submit a job directly to that node
#
set host_0      ""
set slurm_user  1
set timeout     10
spawn $srun -N1 -l --nodelist=$include_node --no-allocate -t1 $bin_hostname  
expect {
	-re "Invalid job credential" {
		send_user "\nWARNING: Not SlurmUser or root.\n"
		set slurm_user 0
		exp_continue
	}
	-re "0: ($alpha_numeric)" {
		set host_0 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nWARNING: srun not responding, "
		send_user "expected if not SlurmUser or root.\n"
		set slurm_user 0
	}
	eof {
	}
}
if {$slurm_user == 0} {
	exit 0;
}

#
# Verify node count and name
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_0 $include_node] != 0} {
	send_user "\nFAILURE: Allocation lacked an included node\n"
	set exit_code   1	
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
