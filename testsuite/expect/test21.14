#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          sacctmgr modify multiple accounts
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2008 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# LLNL-CODE-402394.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "21.14"
set exit_code   0
set acmatches   0
set aamatches   0
set ammatches   0
set almatches   0
set aclmatches  0
set lmatches    0
set lamatches   0
set damatches   0
set dcmatches   0
set not_support 0
set add		add
set lis		list
set del		delete
set mod		modify
set nams	Names
set nam		Name
set fs		Fairshare
set mc		MaxCPUSecs
set mj		MaxJobs
set mn		MaxNodes
set mw		MaxWall
set clu		cluster
set tc1		tcluster1
set tc2		tcluster2
set tc3		tcluster3
set fs1		2500
set fs2		1700
set mc1		1000000
set mc2		700000
set mj1		50
set mj2		70
set mn1		300
set mn2		70
set mw1		01:00:00
set mw2		00:07:00
set acc		account
set ass		associations
set nm1		testaccta1
set nm2		testaccta2
set nm3		testaccta3
set des		Description
set ds1		testaccounta1
set ds2		testacct
set org		Organization
set or1		accountorga1
set or2		acttrg
set qs		QosLevel
set qs1		normal
set par		parent


print_header $test_id

set timeout 60

#
# Check accounting config and bail if not found.
#
if { [test_account_storage] == 0 } {
	send_user "\nWARNING: This test can't be run without a usable AccountStorageType\n"
	exit 0
}


#
# Use sacctmgr to create a cluster
#	
proc _add_cluster {name} {
        global sacctmgr timeout

	set exit_code 0
	set matches 0

	if { ![string length $name] } {
		send_user "FAILURE: we need a name to add\n"
		return 1
	}

	set my_pid [spawn $sacctmgr -i add cluster $name]
	expect {
		-re "(There was a problem|Unknown condition|Bad format on|Bad MaxWall|Unknown option)" {
			send_user "FAILURE: there was a problem with the sacctmgr command\n"
			set exit_code 1
		}
		-re "Problem getting" {
			send_user "FAILURE: there was a problem getting information from the database\n"
			set exit_code 1
		}
		-re "Problem adding" {
			send_user "FAILURE: there was an unknwon problem\n"
			set exit_code 1
		}
		-re "No associations" {
			send_user "FAILURE: your command didn't return anything\n"
			set exit_code 1
		}
		-re "Adding Cluster" {
			incr matches
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: sacctmgr add not responding\n"
			slow_kill $my_pid
			exit_code 1
		}
		eof {
			wait
		}
	}

	if {$matches != 1} {
		send_user "\nFAILURE:  sacctmgr had a problem adding clusters
	got $matches\n"
		set exit_code 1
	}

	if { ![check_acct_associations] } {
		send_user "\nFAILURE:  Our associations don't line up\n"
		set exit_code 1
	}
	
	return $exit_code
}

#
# Use sacctmgr to remove the test cluster
#
proc _remove_cluster {name} {
        global sacctmgr timeout

	set exit_code 0
	set matches 0

	if { ![string length $name] } {
		send_user "FAILURE: we need a name to remove\n"
		return 1
	}

	set my_pid [spawn $sacctmgr -i delete cluster $name]
	expect {
		-re "(There was a problem|Unknown condition|Bad format on|Bad MaxWall|Unknown option)" {
			send_user "FAILURE: there was a problem with the sacctmgr command\n"
			set exit_code 1
		}
		-re "Problem getting" {
			send_user "FAILURE: there was a problem getting information from the database\n"
			set exit_code 1
		}
		-re "Problem adding" {
			send_user "FAILURE: there was an unknwon problem\n"
			set exit_code 1
		}
		-re "No associations" {
			send_user "FAILURE: your command didn't return anything\n"
			set exit_code 1
		}
		-re "Deleting clusters" {
			incr matches
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: sacctmgr delete not responding\n"
			slow_kill $my_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}
	
	if {$matches != 1} {
		send_user "\nFAILURE: sacctmgr had a problem deleting cluster got $matches\n"
		set exit_code 1
	}
	
	if { ![check_acct_associations] } {
		send_user "\nFAILURE:  Our associations don't line up\n"
		set exit_code 1
	}
	return $exit_code
}

#
# Use sacctmgr to add an account
#
proc _add_acct { cluster name } {
        global sacctmgr timeout

	set exit_code 0
	set matches 0

	if { ![string length $name] } {
		send_user "FAILURE: we need a name to add\n"
		return 1
	}

	set command "$name"

	if { [string length $cluster] } {
		set command "$command cluster=$cluster"
	}

	set my_pid [eval spawn $sacctmgr -i add account $command]
	expect {
		-re "(There was a problem|Unknown condition|Bad format on|Bad MaxWall|Unknown option)" {
			send_user "FAILURE: there was a problem with the sacctmgr command\n"
			set exit_code 1
		}
		-re "Problem getting" {
			send_user "FAILURE: there was a problem getting information from the database\n"
			set exit_code 1
		}
		-re "Problem adding" {
			send_user "FAILURE: there was an unknwon problem\n"
			set exit_code 1
		}
		-re "No associations" {
			send_user "FAILURE: your command didn't return anything\n"
			set exit_code 1
		}
		-re "Adding Account" {
			incr matches
			exp_continue
		}
		-re "Associations" {
			incr matches
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: sacctmgr add not responding\n"
			slow_kill $my_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}

	if {$matches != 2} {
		send_user "\nFAILURE:  sacctmgr had a problem adding account.
	got $matches\n"
		set exit_code 1
	}
	return $exit_code
}

#
# Use sacctmgr to remove an account
#
proc _remove_acct { cluster name } {
        global sacctmgr timeout

	set exit_code 0
	set matches 0
	set check "Deleting account"

	if { ![string length $name] } {
		send_user "FAILURE: we need a name to remove\n"
		return 1
	}

	set command "$name"

	if { [string length $cluster] } {
		set command "$command cluster=$cluster"
		set check "Deleting account associations"
	}

	set my_pid [eval spawn $sacctmgr -i delete account $command]
	expect {
		-re "(There was a problem|Unknown condition|Bad format on|Bad MaxWall|Unknown option)" {
			send_user "FAILURE: there was a problem with the sacctmgr command\n"
			set exit_code 1
		}
		-re "Problem getting" {
			send_user "FAILURE: there was a problem getting information from the database\n"
			set exit_code 1
		}
		-re "Problem adding" {
			send_user "FAILURE: there was an unknwon problem\n"
			set exit_code 1
		}
		-re "No associations" {
			send_user "FAILURE: your command didn't return anything\n"
			set exit_code 1
		}
		-re $check {
			incr matches
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: sacctmgr add not responding\n"
			slow_kill $my_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}

	if {$matches != 1} {
		send_user "\nFAILURE:  sacctmgr had a problem deleting account.
	got $matches\n"
		set exit_code 1
	}
	return $exit_code
}

#
# Use sacctmgr to modify an account
#
proc _mod_acct_limits_and_desc { cluster name desc org fs maxcpu maxjob maxnodes maxwall wdesc worg} {
	global sacctmgr timeout
	
	set exit_code 0
	set matches 0

	if { ![string length $name] } {
		send_user "FAILURE: we need a name to modify\n"
		return 1
	}

	#set up the where
	set wcommand "where $name"

	if { [string length $cluster] } {
		set wcommand "$wcommand cluster=$cluster"
	}

	if { [string length $wdesc] } {
		set wcommand "$wcommand description='$wdesc'"
	}

	if { [string length $worg] } {
		set wcommand "$wcommand organization='$worg'"
	}

	#set up the set
	set scommand "set"
	if { [string length $fs] } {
		set scommand "$scommand fairshare=$fs"
	}

	if { [string length $maxcpu] } {
		set scommand "$scommand maxc=$maxcpu"
	}

	if { [string length $maxjob] } {
		set scommand "$scommand maxj=$maxjob"
	}

	if { [string length $maxnodes] } {
		set scommand "$scommand maxn=$maxnodes"
	}

	if { [string length $maxwall] } {
		set scommand "$scommand maxw=$maxwall"
	}

	if { [string length $desc] } {
		set scommand "$scommand description='$desc'"
	}

	if { [string length $org] } {
		set scommand "$scommand organization='$org'"
	}

	set my_pid [eval spawn $sacctmgr -i modify account $scommand $wcommand ]
	expect {
		-re "(There was a problem|Unknown condition|Bad format on|Bad MaxWall|Unknown option)" {
			send_user "FAILURE: there was a problem with the sacctmgr command\n"
			set exit_code 1
		}
		-re "Problem getting" {
			send_user "FAILURE: there was a problem getting information from the database\n"
			set exit_code 1
		}
		-re "Problem adding" {
			send_user "FAILURE: there was an unknwon problem\n"
			set exit_code 1
		}
		-re "No associations" {
			send_user "FAILURE: your command didn't return anything\n"
			set exit_code 1
		}
		-re "Modified accounts" {
			incr matches
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: sacctmgr add not responding\n"
			slow_kill $my_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}

	if {$matches != 1} {
		send_user "\nFAILURE:  sacctmgr had a problem modifying account.
	got $matches\n"
		set exit_code 1
	}
	
	if { ![check_acct_associations] } {
		send_user "\nFAILURE:  Our associations don't line up\n"
		set exit_code 1
	}
	return $exit_code
}

set exit_code [_add_cluster "$tc1,$tc2"]
if { $exit_code } {
	_remove_cluster "$tc1,$tc2"
	exit $exit_code
}

set exit_code [_add_acct "$tc1,$tc2" "$nm1,$nm2,$nm3"]
if { $exit_code } {
	_remove_acct "" "$nm1,$nm2,$nm3"
	_remove_cluster "$tc1,$tc2"
	exit $exit_code
}

set exit_code [_remove_acct "$tc1,$tc2" "$nm1,$nm2,$nm3"]
set exit_code [_remove_acct "" "$nm1,$nm2,$nm3"]
set exit_code [_remove_cluster "$tc1,$tc2"]

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
} else {
	send_user "\nFAILURE\n"
}
exit $exit_code

#
# Use sacctmgr to modify an account
#
set my_pid [spawn $sacctmgr -i mod $acc set $des="$ds2" $fs=$fs2 $mc=$mc2 $mj=$mj2 $mn=$mn2 $mw=$mw2 $org="$or2" $par=$nm1 where $des="$ds1" $nams=$nm2,$nm3 $org="$or1" ]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	set exit_code 1
	}
	-re "Modified accounts" {
		incr ammatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr add not responding\n"
		slow_kill $my_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$ammatches != 1} {
	send_user "\nFAILURE:  sacctmgr had a problem modifying account.
	got $ammatches\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

#
# Use sacctmgr to list the test account modifications
#
set my_pid [spawn $sacctmgr -n list $acc withassoc acc=$nm1,$nm2,$nm3]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	set exit_code 1
	}
	-re "$nm1 *$ds1 *$or1 *$qs1 *$tc1 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lamatches
		exp_continue
	}
	-re "$nm1 *$ds1 *$or1 *$qs1 *$tc2 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lamatches
		exp_continue
	}
	-re "$nm2 *$ds2 *$or2 *$qs1 *$tc1 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	-re "$nm2 *$ds2 *$or2 *$qs1 *$tc2 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	-re "$nm3 *$ds2 *$or2 *$qs1 *$tc1 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	-re "$nm3 *$ds2 *$or2 *$qs1 *$tc2 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$lamatches != 6} {
	send_user "\nFAILURE:  Account modification incorrect.\n"
	set exit_code 1
}

#
# Use sacctmgr to delete the test account
#
set my_pid [spawn $sacctmgr -i $del $acc $nm1,$nm2,$nm3]
expect {
	-re "Deleting account" {
		incr damatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr delete not responding\n"
		slow_kill $my_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$damatches != 1} {
	send_user "\nFAILURE: sacctmgr had a problem deleting cluster got $damatches\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

#
# Use sacctmgr to delete the test cluster
#
set my_pid [spawn $sacctmgr -i $del $clu $tc1,$tc2]
expect {
	-re "Deleting clusters" {
		incr dcmatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr delete not responding\n"
		slow_kill $my_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$dcmatches != 1} {
	send_user "\nFAILURE: sacctmgr had a problem deleting cluster got $dcmatches\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
		} else {
	send_user "\nFAILURE\n"
		}

exit $exit_code
