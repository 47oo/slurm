#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          sacctmgr modify multiple accounts
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2008 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# LLNL-CODE-402394.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "21.14"
set exit_code   0
set acmatches   0
set aamatches   0
set ammatches   0
set almatches   0
set aclmatches  0
set lmatches    0
set lamatches   0
set damatches   0
set dcmatches   0
set not_support 0
set add		add
set lis		list
set del		delete
set mod		modify
set nams	Names
set nam		Name
set fs		Fairshare
set mc		MaxCPUSecs
set mj		MaxJobs
set mn		MaxNodes
set mw		MaxWall
set clu		cluster
set tc1		tcluster1
set tc2		tcluster2
set tc3		tcluster3
set fs1		2500
set fs2		1700
set mc1		1000000
set mc2		700000
set mj1		50
set mj2		70
set mn1		300
set mn2		70
set mw1		01:00:00
set mw2		00:07:00
set acc		account
set ass		associations
set nm1		testaccta1
set nm2		testaccta2
set nm3		testaccta3
set des		Description
set ds1		testaccounta1
set ds2		testacct
set org		Organization
set or1		accountorga1
set or2		acttrg
set qs		QosLevel
set qs1		normal
set par		parent


print_header $test_id


#
# Check accounting config and bail if not found.
#
if { [test_account_storage] == 0 } {
	send_user "\nWARNING: This test can't be run without a usable AccountStorageType\n"
	exit 0
}
 
#
# Use sacctmgr to create a cluster
#
set sadd_pid [spawn $sacctmgr -i add $clu $nams=$tc1,$tc2 $fs=$fs1 $mc=$mc1 $mj=$mj1 $mn=$mn1 $mw=$mw1]
expect {
	-re "Adding Cluster" {
		incr acmatches
		exp_continue
	}
		timeout {
		send_user "\nFAILURE: sacctmgr add not responding\n"
		slow_kill $sadd_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$acmatches != 1} {
	send_user "\nFAILURE:  sacctmgr had a problem adding clusters
	got $acmatches\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

#
# Use sacctmgr to add an account
#
set sadel_pid [spawn $sacctmgr -i $add $acc $clu=$tc1,$tc2 $des="$ds1" $fs=$fs1 $mc=$mc1 $mj=$mj1 $mn=$mn1 $mw=$mw1 $nams=$nm1,$nm2,$nm3 $org="$or1" $qs=$qs1]
expect {
	-re "Adding Account" {
		incr aamatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr add not responding\n"
		slow_kill $sadd_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$aamatches != 1} {
	send_user "\nFAILURE:  sacctmgr had a problem adding account.
	got $aamatches\n"
	set exit_code 1
}

#
# Use sacctmgr to list the test accounts
#
set ac_list_pid [spawn $sacctmgr -n list $acc withassoc]
expect {
	-re "$nm1 *$ds1 *$or1 *$qs1 *$tc1 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lmatches
		exp_continue
	}
	-re "$nm1 *$ds1 *$or1 *$qs1 *$tc2 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lmatches
		exp_continue
	}
	-re "$nm2 *$ds1 *$or1 *$qs1 *$tc1 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lmatches
		exp_continue
	}
	-re "$nm2 *$ds1 *$or1 *$qs1 *$tc2 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lmatches
		exp_continue
	}
	-re "$nm3 *$ds1 *$or1 *$qs1 *$tc1 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lmatches
		exp_continue
	}
	-re "$nm3 *$ds1 *$or1 *$qs1 *$tc2 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lmatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $ac_list_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$lmatches != 6} {
	send_user "\nFAILURE:  Accounts addition not correct.\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

#
# Use sacctmgr to modify an account
#
set sadel_pid [spawn $sacctmgr -i $mod $acc set $des="$ds2" $fs=$fs2 $mc=$mc2 $mj=$mj2 $mn=$mn2 $mw=$mw2 $org="$or2" $par=$nm1 where $des="$ds1" $nams=$nm2,$nm3 $org="$or1" ]
expect {
	-re "Modified accounts" {
		incr ammatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr add not responding\n"
		slow_kill $sadd_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$ammatches != 1} {
	send_user "\nFAILURE:  sacctmgr had a problem modifying account.
	got $ammatches\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

#
# Use sacctmgr to list the test account modifications
#
set ac_list_pid [spawn $sacctmgr -n list $acc withassoc]
expect {
	-re "$nm1 *$ds1 *$or1 *$qs1 *$tc1 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lamatches
		exp_continue
	}
	-re "$nm1 *$ds1 *$or1 *$qs1 *$tc2 *root *$fs1 *$mc1 *$mj1 *$mn1 *$mw1" {
		incr lamatches
		exp_continue
	}
	-re "$nm2 *$ds2 *$or2 *$qs1 *$tc1 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	-re "$nm2 *$ds2 *$or2 *$qs1 *$tc2 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	-re "$nm3 *$ds2 *$or2 *$qs1 *$tc1 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	-re "$nm3 *$ds2 *$or2 *$qs1 *$tc2 *$nm1 *$fs2 *$mc2 *$mj2 *$mn2 *$mw2" {
		incr lamatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $ac_list_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$lamatches != 6} {
	send_user "\nFAILURE:  Account modification incorrect.\n"
	set exit_code 1
}

#
# Use sacctmgr to delete the test account
#
set sadel_pid [spawn $sacctmgr -i $del $acc $nm1,$nm2,$nm3]
expect {
	-re "Deleting account" {
		incr damatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr delete not responding\n"
		slow_kill $sadel_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$damatches != 1} {
	send_user "\nFAILURE: sacctmgr had a problem deleting cluster got $damatches\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

#
# Use sacctmgr to delete the test cluster
#
set sadel_pid [spawn $sacctmgr -i $del $clu $tc1,$tc2]
expect {
	-re "Deleting clusters" {
		incr dcmatches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr delete not responding\n"
		slow_kill $sadel_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$dcmatches != 1} {
	send_user "\nFAILURE: sacctmgr had a problem deleting cluster got $dcmatches\n"
	set exit_code 1
}

if { ![check_acct_associations] } {
	send_user "\nFAILURE:  Our associations don't line up\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
		} else {
	send_user "\nFAILURE\n"
		}

exit $exit_code
