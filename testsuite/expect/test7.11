#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of SPANK plugin
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2008 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# LLNL-CODE-402394.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id	    "7.11"
set cwd		    "[$bin_pwd]"
set exit_code	    0
set file_out	    "${cwd}/test${test_id}.out"
set file_prog	    "${cwd}/test${test_id}.prog"
set orig_spank_conf "${cwd}/test${test_id}.orig_conf"
set new_spank_conf  "${cwd}/test${test_id}.new_conf"


print_header $test_id

if {[test_super_user] == 0} {
	send_user "\nWARNING: This test must be run as SlurmUser\n"
	exit 0
}
if {[test_aix] == 1} {
	send_user "WARNING: Test is incompatible with AIX\n"
	exit 0
}

#
# Build the plugin
#
exec $bin_rm -f ${file_prog}.so
exec $bin_cc -shared -I${slurm_dir}/include -o ${file_prog}.so ${file_prog}.c

#
# Locate slurm.conf's directory, copy the original plugstack.conf file
# and create an updated one using our new plugin
#
log_user 0
set config_dir ""
spawn $scontrol show config
expect {
	-re "SLURM_CONFIG_FILE.*= (/.*)/slurm.conf" {
		set config_dir $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
log_user 1
if {[string compare $config_dir ""] == 0} {
	send_user "\nFAILURE: Could not locate slurm.conf directory\n"
	exit 1
}
set spank_conf_file ${config_dir}/plugstack.conf
exec $bin_rm -f $orig_spank_conf $new_spank_conf $file_out
if {[file exists $spank_conf_file]} {
	exec $bin_cp $spank_conf_file $orig_spank_conf
	exec $bin_cp $spank_conf_file $new_spank_conf
} else {
	exec $bin_cp /dev/null $new_spank_conf
}
exec $bin_echo "required ${file_prog}.so ${file_out}" >>$new_spank_conf
spawn $bin_cp $new_spank_conf $spank_conf_file
expect {
	-re "Permission denied" {
		send_user "\nWARNING: User lacks permission to update plugstack_conf file\n"
		exit 0
	}
	eof {
		wait
	}
}

#
# Test of srun help message
#
set matches 0
set srun_pid [spawn $srun --help]
expect {
	-re "Component of slurm test suite" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: spank help message not in srun help message\n"
	set exit_code 1
}

#
# Test of locally logged messages()
#
set matches 0
set srun_pid [spawn $srun --test_suite=5 $bin_uname]
expect {
	-re "error" {
		send_user "\nFAILURE: some error happened\n"
		set matches -9999
		exp_continue
	}
	-re "_test_opt_process: test_suite: opt_arg=5" {
		incr matches
		exp_continue
	}
	-re "slurm_spank_local_user_init" {
		incr matches
		exp_continue
	}
	-re "slurm_spank_exit: opt_arg=5" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 3} {
	send_user "\nFAILURE: local (srun) spank plugins failure\n"
	set exit_code 1
}

#
# Test for slurmd output in file
#
set matches 0
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "slurm_spank_task_init: opt_arg=5" {
			incr matches
			exp_continue
		}
		-re "slurm_spank_exit: opt_arg=5" {
			incr matches
			exp_continue
		}
		eof {
			wait
		}
	}
}
if {$matches != 2} {
	send_user "\nFAILURE: remote (slurmd) spank plugins failure\n"
	set exit_code 1
}

#
# Restore the original plugstack
#
if {[file exists $orig_spank_conf]} {
	exec $bin_cp $orig_spank_conf $spank_conf_file
} else {
	exec $bin_rm -f $spank_conf_file
}

if {$exit_code == 0} {
	exec $bin_rm -f $orig_spank_conf $new_spank_conf $file_out ${file_prog}.so
	send_user "\nSUCCESS\n"
}
exit $exit_code
